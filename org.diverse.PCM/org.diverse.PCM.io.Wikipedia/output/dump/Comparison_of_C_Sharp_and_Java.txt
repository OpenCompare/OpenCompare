data types
java
c#
single-root (unified) type system
no; but wrapper types
yes
signed integers
yes; 8, 16, 32, 64 bits
yes; 8, 16, 32, 64 bits
unsigned integers
no; but some method support.
yes; 8, 16, 32, 64 bits
character
yes
yes
date/time
yes; reference type
yes; value type
ieee 754 binary32 floating point number
yes
yes
ieee 754 binary64 floating point number
yes
yes
boolean type
yes
yes
high precision decimal number
no; but see 'arbitrary size decimals' below
128-bit (28 digits) decimal type
arbitrary size decimals
reference type; no operators
no
strings
immutable reference type, unicode
immutable reference type, unicode
arbitrary size integers
reference type; no operators
yes
complex numbers
no
yes
reference types
yes
yes
arrays
yes
yes
value types
no; only primitive types
yes
type annotations
yes
yes
enumerated types
yes; reference type
yes; scalar
lifted (nullable) types
no; but wrapper types
yes
tuples
no; limited 3rd party available.
yes
pointers
no; only method references
yes

java
c#
definition
in java, the enumeration type is a class, and its values are objects (instances) of that class. the only valid values are the ones listed in the enumeration. the enumeration type may declare fields, allowing each individual enumerated value to reference additional data associated uniquely with that specific value. the enumeration type may also declare or override methods, or implement interfaces.
enumeration in c# are implicitly derived from the type that again is a value type derivative. the value set of a c# enumeration is defined by the underlying type that can be a signed or unsigned integer type of 8, 16, 32 or 64 bits. the enumeration definition defines names for the selected integer values. by default the first name is assigned the value 0 (zero) and the following names are assigned in increments of 1. any value of the underlying primitive type is a valid value of the enumeration type, though an explicit cast may be needed to assign it.
combining
java enumeration set and map collections provide functionality to combine multiple enumeration values to a combined value. these special collections allows compiler optimization to minimize the overhead incurred by using collections as the combination mechanism.
c# supports bit-mapped enumerations where an actual value may be a combination of enumerated values bitwise or'ed together. the formatting and parsing methods implicitly defined by the type will attempt to use these values.
reference types
java
c#
garbage collection
yes
yes
weak reference
yes
yes
reference queue (interaction with garbage collection)
yes
yes
soft and phantom references
yes
no
proxy support
yes; proxy generation
yes; object contexts
object orientation
java
c#
classes
mandatory
mandatory
interfaces
yes
yes
abstract classes
yes
yes
member accessibility levels
yes; public, package, protected, private
yes; public, internal, protected, private, protected internal
class-level inner classes
yes; inner classes are class level
yes; all inner classes are class level
instance-level inner classes
yes
no
statement-level (local) anonymous classes
yes
yes; without methods
partial class
no; but see aspectj
yes
implicit (inferred) anonymous classes
no
yes
deprecation/obsolescence
yes
yes
overload versioning
some
yes
enums can implement interfaces
yes
no
properties
no, but see javabeans spec
yes
events
provided by standard libraries
built-in language feature
operator overloading
no
yes
indexers
no
yes
implicit conversions
no
yes
explicit conversions
no
yes
fields and initialization
java
c#
fields
yes
yes
constants
yes
yes; but no support for constant passed parameters
static (class) constructors
yes
yes
instance constructors
yes
yes
finalizers/destructors
yes
yes
instance initializers
yes
no; can be simulate with instance constructor
object initialization
bottom-up (fields and constructors)
top-down (fields); bottom-up (constructors)
object initializers
no
yes
collection initializers
no; can be modelled
yes
array initializers
yes
yes
methods and properties
java
c#
static imports
yes
no
virtual methods
virtual by default
non-virtual by default
abstract
yes
yes
sealing
yes
yes
explicit interface implementation
default methods in java 8
yes
value (input) parameters
yes
yes
reference (input/output) parameters
no
yes
output (output) parameters
no
yes
constant (immutable) parameters
yes;final parameters
no
variadic methods
yes
yes
optional arguments
no
yes
named arguments
no
yes
generator methods
no
yes
extension / default methods
yes
yes
conditional methods
no
yes
partial methods
no
yes
java
c#
generics
java
c#
implementation
type erasure
reification
runtime realization
no
yes
covariance
yes
yes
contravariance
yes
yes
reference type constraint
yes; implicit
yes
value/primitive type constraint
no
yes
constructor constraint
no
yes
relation constraint
yes
yes
primitive/value type support
no
yes
migration compatibility
yes
no
java
c#
type checks and downcasts are injected into client code (the code referencing the generics). compared to non-generic code with manual casts, these casts will be the same, but compared to compile-time verified code that would not need runtime casts and checks, these operations represent a performance overhead.
c#/.net generics guarantee type-safety and are verified at compile time, making extra checks/casts are unnecessary at runtime. hence, generic code will run faster than non-generic (or type-erased) code that require casts when handling non-generic or type-erased objects.
cannot use primitive types as type parameters; instead, the developer must use the wrapper type corresponding to the primitive type. this incurs extra performance overhead by requiring boxing and unboxing conversions as well a memory and garbage collection pressure, as the wrappers will be heap-allocated as opposed to stack-allocated.
primitive and value types are allowed as type parameters in generic realizations. at runtime code will be synthesized and compiled for each unique combination of type parameters upon first use. generics that are realized with primitive/value type do not require boxing/unboxing conversions.
generic exceptions are not allowed and a type parameter cannot be used in a catch clause
can both define generic exceptions and use those in catch clauses
static members are shared across all generic realizations (during type erasure all realizations are folded into a single class)
static members are separate for each generic realization. a generic realization is a unique class.
type parameters cannot be used in declarations of static fields/methods or in definitions of static inner classes
no restrictions on use of type parameters
cannot create an array where the component type is a generic realization (concrete parameterized type)
a generic realization is a 1st class citizen and can be used as any other class; also an array component
cannot create an array where the component type is a type parameter
type parameters represent actual, discrete classes and can be used like any other type within the generic definition.
there is no class literal for a concrete realization of a generic type
a generic realization is an actual class.
is not allowed with type parameters or concrete generic realizations
the and operators work the same for type parameters as for any other type.
cannot create new instances using a type parameter as the type
with a constructor constraint, generic methods or methods of generic classes can create instances of classes that have default constructors.
type information is erased during compilation. special extensions to reflection must be used to discover the original type.
type information about c# generic types is fully preserved at runtime, and allows complete reflection support as well as instantiation of generic types.
reflection cannot be used to construct new generic realizations. during compilation extra code (typecasts) are injected into the client code of generics. this precludes creating new realizations later.
reflection can be used to create new realizations for new combinations of type parameters.
functional programming
java
c#
method references
yes (as of java 8)
yes
closures
all lambdas do not introduce a new level of scope. all referenced variables must be effectively final(as of java 8)
yes
lambda expressions
yes (as of java 8)
yes
expression trees
no
yes
generic query language
no; but see 'java 8 stream' (monad)
yes
tail recursion compiler optimizations
no
only on x64
runtime (dynamic) binding
java
c#
late-bound (dynamic) type
no
yes
runtime type information and manipulation
java
c#
runtime type information
yes; but with type erasure
yes
runtime generics realization
no
yes
runtime type construction
no; third party tools exist
yes
statements
java
c#
loops
yes
yes
conditionals
yes
yes
flow control
yes
yes
assignment
yes
yes
exception control
yes
yes
variable declaration
yes
yes
variable type inference
no
yes
deterministic disposal (arm-blocks)
yes (starting with java 7)
yes
expressions and operators
java
c#
arithmetic operators
yes
yes
logical operators
yes
yes
bitwise logic operators
yes
yes
conditional
yes
yes
string concatenation
yes
yes
casts
yes
yes
boxing
yes; implicit
yes; implicit
unboxing
yes; implicit
yes; explicit
lifted operators
no
yes
overflow control
no
yes
strict floating point evaluation
yes; opt-in/out
no
verbatim (here-)strings
no
yes
exceptions
java
c#
checked exceptions
yes
no
try-catch-finally
yes
yes
arrays and collections
java
c#
abstract data type
yes
yes
one-dimensional, zero-based index arrays
yes
yes
multidimensional arrays, rectangular (single array)
no
yes
multidimensional arrays, jagged (arrays of arrays)
yes
yes
non-zero based arrays
no
some
unified arrays and collections
no
yes
maps/dictionaries
yes
yes
sorted dictionaries
yes
yes
sets
yes
yes
sorted sets
yes
yes
lists/vectors
yes
yes
queues/stacks
yes
yes
priority queue
yes
no
bags/multisets
yes
yes
concurrency optimized collections
yes
yes
java
c#
arrays are implicitly direct specializations of . they are not unified with collection types.
arrays in c# are implicit specializations of the class that implements a number of collection interfaces.
arrays and collections are completely separate with no unification. arrays cannot be passed where sequences or collections are expected
arrays can be passed where sequences (s) or collections/list interfaces are expected. however, the collection operations that alter the number of elements (insert/add/remove) will throw exceptions as these operations are not supported by arrays.
the statement accepts either arrays or s. all collections implement . this means that the same short syntax can be used in for-loops.
the statement iterates through a sequence using the or interface. because arrays always implicitly implement these interfaces, the loop will iterate through arrays as well.
in both languages arrays are covariant. this means that a array is assignable to variables of because is a specialization of (assignable to) . in both languages the arrays will perform a type check when inserting new values because type-safety would otherwise be compromised. this is in contrast to how generic collections have been implemented in both languages.
in both languages arrays are covariant. this means that a array is assignable to variables of because is a specialization of (assignable to) . in both languages the arrays will perform a type check when inserting new values because type-safety would otherwise be compromised. this is in contrast to how generic collections have been implemented in both languages.
no multidimensional arrays (rectangular arrays), but arrays of references to arrays (jagged array).
multidimensional arrays (rectangular arrays), as well as arrays of references to arrays (jagged array).
arrays cannot be resized (though use of the method can allow for multi-step array resizing)
arrays can be resized while preserving existing values using the static array method.
implemented as a retrofit for the library having extra features, like data structures like sets and linked sets, and has a number of algorithms to manipulate elements of a collection, like finding the largest element based on some comparator object, finding the smallest element, finding sublists within a list, reverse the contents of a list, shuffle the contents of a list, create immutable versions of a collection, performs sorts, and make binary searches.
the c# collections framework consists of classes from the and the namespaces with a number of useful interfaces, abstract classes, and data structures. net 3.5 added namespace contains various extension methods for querying collections, such as , , , , , and many others. queries using these methods are called linq queries.
java
c#
metadata
java
c#
metadata annotations/attributes
interface based; user-defined annotations can be created
class based
positional arguments
no; unless a single argument
yes
named arguments
yes
yes
default values
at definition
through initialization
nested types
yes
yes
specialization
no
yes
conditional metadata
no
yes
preprocessing, compilation and packaging
java
c#
namespaces
packages
namespaces
file contents
restricted
free
packaging
package
assembly
classes/assembly search path
classpath
both compile-time and runtime
conditional compilation
yes
yes
custom errors/warnings
yes; annotationprocessor
yes
explicit regions
no
yes
threading and synchronization
java
c#
threads
yes
yes
thread pool
yes
yes
task-based parallelism
partial
yes
semaphores
yes
yes
monitors
yes
yes
thread-local variables
yes
yes; threadstaticattribute
native interoperability
java
c#
cross-language interoperability
yes (with nashorn, corba, jni or jna)
yes; c# was designed for it
external/native methods
yes
yes
marshalling
external glue code required
yes; metadata controlled
pointer and arithmetics
no; but references exist
yes
native types
yes
yes
fixed-size buffers
no
yes
explicit stack allocation
no
yes
address-of
no
yes
object pinning (fix variable to address)
no
yes
platform support
java
c#
linux
yes
via mono
mac os x
yes
via mono
solaris
yes
via mono
freebsd
yes
via mono
aix
yes
partial?
ios
via robovm or codename one
via mono
windows
yes
yes
windows mobile
yes
yes
windows phone
via codename one
yes
android
via dalvik, art
via mono
feature phones
yes
no
symbian
yes
deprecated
blackberry
yes
via cross-compiler
keyword
feature, example usage
,
in c#, statement blocks or expressions can enable run-time checking for arithmetic overflow.
,
c# implements properties as part of the language syntax with their optional corresponding and accessors, as an alternative for the accessor method used in java, which is not a language feature but a coding-pattern based on method name conventions.

c# supports the keyword. this can occasionally be useful, for example for implementing finite state machine or for generated code, but the use of a more structured method of control flow is usually recommended (see criticism of the goto statement). java does not support the statement (but is a reserved word). however, java does support labeled and statements, which in certain situations can be used when a statement might otherwise be used.

in c#, the keyword is a shorthand for synchronizing access to a block of code across threads (using a ), wrapped in a … block.
,
c# has support for output and reference parameters. these allow returning multiple output values from a method, or passing values by reference.

java uses to guarantee the results of floating point operations remain the same across platforms.

in c#, the switch statement also operates on strings and longs. fallthrough is allowed for empty statements and possible via 'goto case' for statements containing code. java's switch statement does not operate on strings (before java 7) nor primitive type but falls through for all statements (excluding those with '').

in java, the keyword is a shorthand for synchronizing access to a block of code across threads (using a ), wrapped in a … block.

java requires every method to declare the checked exceptions or superclasses of the checked exceptions that it can throw. any method can also optionally declare the unchecked exception that it throws. c# has no such syntax.

in c#, causes the method (implemented via the interface) of the object declared to be executed after the code block has run or when an exception is thrown within the code block.in java se 7 a similar construct has been added called try-with-resources :
java
c#


notes on the java implementation: files.readallbytes method reads a whole file into a byte array. files.write method writes a byte array into an output file, indicated by a path object. files.write method also takes care of buffering and closing the output stream. an explicit option should be specified for the files.write method whether it should overwrite or append to the output file. standardopenoption.create indicates that the output file should be created or overwritten if exists.
notes on the c# implementation: the method returns an enumerable object which upon enumeration will read the file one line at a time. the method takes an enumerable and retrieves a line at a time and writes it until the enumeration ends. the underlying reader will automatically allocate a buffer, thus there is no need to explicitly introduce a buffered stream. automatically closes the output stream, also in the case of an abnormal termination.
java
c#


java
c#


java
c#


java
c#




notes for the java implementation: ruby accessors names are generated from the attribute name with a suffix. when assigning values, java developers must use the ruby accessor method name. dynamic objects from a foreign language are not first-class objects in that they must be manipulated through an api.
notes for the c# implementation: objects returned from properties or methods of objects are themselves of type. when type inference (the keyword) is used, the variables calc and answer are inferred dynamic/late-bound. dynamic, late-bounds objects are first-class citizens that can be manipulated using c# syntax even though they have been created by an external language. is a reserved word. the prefix allows keywords to be used as identifiers.

java
c#
||


java
c#
