
8 bit (byte)
8 bit (byte)
16 bit (short integer)
16 bit (short integer)
32 bit
32 bit
64 bit (long integer)
64 bit (long integer)
word size
word size
arbitrarily precise (bignum)

signed
unsigned
signed
unsigned
signed
unsigned
signed
unsigned
signed
unsigned
arbitrarily precise (bignum)
ada

or

or

or



or
n/a
algol 68 (variable-width)

n/a

n/a

n/a

n/a

n/a

algol 68 (variable-width)

n/a

n/a

n/a

n/a
&
&

c (c99 fixed-width)










n/a
c++ (c++11 fixed-width)










n/a
c (c99 variable-width)










n/a
c++ (c++11 variable-width)










n/a
objective-c










n/a
c#










(.net 4.0)
java

n/a



n/a

n/a
n/a
n/a

go

or









swift











d








n/a
n/a

common lisp











scheme











islisp











pascal (fpc)










n/a
visual basic
n/a


n/a

n/a
n/a
n/a
n/a
n/a
n/a
visual basic .net








n/a
n/a
(.net 4.0)
freebasic
or
or
or
or
or
or
or
or


n/a
python 2.x
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

n/a

python 3.x
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

s-lang
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
fortran

n/a

n/a

n/a

n/a



php
n/a
n/a
n/a
n/a

n/a

n/a
n/a
n/a

perl 5
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

perl 6









n/a
n/a
ruby
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

n/a

erlang
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
integer()
n/a
integer()
scala

n/a



n/a

n/a
n/a
n/a

seed7
n/a
n/a
n/a
n/a
n/a
n/a

n/a
n/a
n/a

smalltalk
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

n/a

windows powershell
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
ocaml
n/a
n/a
n/a
n/a

n/a

n/a



f#




or






standard ml
n/a

n/a
n/a






or
haskell (ghc)
â«â»
â«â»
â«â»
â«â»
â«â»
â«â»
â«â»
â«â»

â«â»

eiffel










n/a
cobol








n/a
n/a
n/a
mathematica
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a


single precision
double precision
processor dependent
ada


n/a
algol 68


, , etc.
c



objective-c



c++ (stl)



c#


n/a
java


n/a
go


n/a
swift


n/a
d



common lisp



scheme



islisp



pascal (free pascal)



visual basic


n/a
visual basic .net


n/a
xojo


n/a
python
n/a


javascript
n/a

n/a
s-lang



fortran



php



perl



perl 6



ruby
n/a

n/a
scala


n/a
seed7
n/a

n/a
smalltalk


n/a
windows powershell


ocaml
n/a

n/a
f#


n/a
standard ml
n/a

n/a
haskell (ghc)



eiffel



cobol



integer
single precision
double precision
half and quadruple precision etc.
ada
n/a



algol 68
n/a

etc.
etc. & etc.
c (c99)
n/a


n/a
c++ (stl)
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

text
text
boolean
enumeration
object/universal

character
string
boolean
enumeration
object/universal
ada





algol 68



n/a - user defined
n/a
c (c99)

n/a



c++ (stl)





objective-c





c#





java





go





swift





d





common lisp





scheme





islisp





pascal (iso)

n/a


n/a
object pascal (delphi)





visual basic
n/a




visual basic .net





xojo
n/a




python
n/a




javascript
n/a




s-lang





fortran





php
n/a




perl
n/a




perl 6





ruby
n/a




scala





seed7





windows powershell





ocaml



n/a
n/a
f#



...

standard ml



n/a
n/a
haskell (ghc)



n/a
n/a
eiffel



n/a

cobol



n/a

mathematica
n/a



n/a

fixed size array
fixed size array
dynamic size array
dynamic size array

one-dimensional array
multi-dimensional array
one-dimensional array
multi-dimensional array
ada

simple composite types
simple composite types
algebraic data type
unions

records
tuple expression
algebraic data type
unions
ada

n/a
any combination of records, unions and enumerations (as well as references to those, enabling recursive types).

algol 68

required types and operators can be user defined
required types and operators can be user defined

c (c99)

n/a
n/a

objective-c

n/a
n/a

c++


n/a

c#



n/a
java
n/a


n/a
javascript

n/a

n/a
d




go




swift




common lisp




scheme
n/a



islisp




pascal

n/a
n/a

visual basic




visual basic .net




python
n/a


n/a
s-lang




fortran
type name end type



php
n/a



perl
n/a


n/a
perl 6
n/a


n/a
ruby



n/a
scala


or or combination of case classes and case objects

windows powershell




ocaml



n/a
f#



n/a
standard ml



n/a
haskell



n/a
cobol

n/a
n/a


variable
constant
type synonym
ada



algol 68



c (c99)



objective-c



c++



c#



d



java


n/a
javascript


n/a
go



swift

if
else if
select case
conditional expression
ada




seed7




modula-2




algol 68 & "brief form"




algol 68 & "brief form"




c (c99)




objective-c




c++ (stl)




d




java




javascript




php




c#




windows powershell




go




swift


while
do while
for i = first to last
foreach
ada




algol 68




algol 68
    do statements od
    do statements od


c (c99)



n/a
objective-c




c++ (stl)



(c++11)
c#




java




javascript



(js 1.6+, deprecated) or (ecmascript 6 proposal, supported in firefox)
php




windows powershell




d




go




swift



throw
handler
assertion
ada



c (c99)



c++



c#



java



javascript


?
d



php



s-lang


?
windows powershell



objective-c



swift
n/a
n/a

perl


?
perl 6


?
ruby



smalltalk



common lisp



scheme (rrs)


?
islisp


exit block(break)
continue
label
branch (goto)
return value from generator
ada

n/a


n/a
algol 68
...

...

(callback)
c (c99)




n/a
objective-c




n/a
c++ (stl)




n/a
d




n/a
c#





java



n/a

javascript



n/a

php





perl





perl 6





go





swift



n/a

bash shell


n/a
n/a
n/a
common lisp



calling a function
basic/void function
value-returning function
required main function
ada



n/a
algol 68



n/a
c (c99)




objective-c




c++ (stl)




c#




java




d




javascript



n/a
go




swift



n/a
common lisp



n/a
scheme



n/a
islisp



n/a
pascal




visual basic




visual basic .net




xojo




python



n/a
s-lang




fortran




forth



n/a
php



n/a
perl



n/a
perl 6



n/a
ruby



n/a
scala




windows powershell



n/a
bash shell



n/a
bash shell

parameters ($1, $2, $3, ...) (all parameters) (the number of parameters) (this function name)
parameters ($1, $2, $3, ...) (all parameters) (the number of parameters) (this function name)
n/a
ocaml



n/a
f#






string to integer
string to long integer
string to floating point
integer to string
floating point to string
ada





algol 68 with general, and then specific formats
with prior declarations and association of:
with prior declarations and association of:
with prior declarations and association of:
with prior declarations and association of:
with prior declarations and association of:
algol 68 with general, and then specific formats





algol 68 with general, and then specific formats
orv
or
or
or
or etc.
c (c99)





objective-c





c++ (stl)





c++11





c#





d





java











go





common lisp





scheme





islisp





pascal





visual basic




visual basic .net



xojo





python





s-lang





fortran





php





perl





perl 6





ruby





scala





windows powershell





ocaml





f#





standard ml





haskell (ghc)





cobol






read from
write to
write to

stdin
stdout
stderr
ada



algol 68



c (c99)



objective-c



c++



c#



d



java



go



swift



javascript web browser implementation



javascript active server pages



javascript windows script host



common lisp



scheme (rrs)



islisp



pascal


n/a
visual basic


n/a
visual basic .net



xojo



python 2.x



python 3.x



s-lang



fortran



forth


n/a
php



perl

argument values
argument counts
program name / script name
ada



c (c99)


first argument
objective-c


first argument
c++


first argument
c#



java



d


first argument
javascript windows script host implementation



go


first argument
swift
or
or
first argument
common lisp
?
?
?
scheme (rrs)


first argument
islisp
n/a
n/a
n/a
pascal


first argument
visual basic

n/a

visual basic .net



xojo

(string parsing)
application.executablefile.name
python


first argument
s-lang


first argument
fortran



php


first argument
bash shell
(all arguments)


perl



perl 6



ruby



windows powershell



ocaml


first argument
f#



standard ml



haskell (ghc)
}
}

cobol


n/a

shell command
execute program
replace current program with new executed program
ada
not part of the language standard. commonly done by compiler provided packages or by interfacing to c or posix.
not part of the language standard. commonly done by compiler provided packages or by interfacing to c or posix.
not part of the language standard. commonly done by compiler provided packages or by interfacing to c or posix.
c



c++



objective-c



c#



f#



go



visual basic



visual basic .net



xojo


n/a
d



java



javascript windows script host implementation



common lisp



scheme



islisp
n/a
n/a
n/a
pascal



ocaml



standard ml



haskell (ghc)



perl



ruby



php



python



s-lang



fortran



windows powershell



bash shell
or


