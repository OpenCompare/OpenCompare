{| class="wikitable"
|+ 
|-
|
! C#
|-
! Arrays and collections are completely separate with no unification. Arrays cannot be passed where sequences or collections are expected.Arrays can be passed where sequences (s) or collections/list interfaces are expected. However, the collection operations that alter the number of elements (insert/add/remove) will throw exceptions as these operations are not supported by arrays.
|-
! Arrays are implicitly direct specializations of . They are not unified with collection types..Arrays in C# are implicit specializations of the  class that implements a number of collection interfaces.
|-
! Arrays cannot be resized (though use of the  method can allow for multi-step array resizing).Arrays can be resized while preserving existing values using the  static array method.
|-
! Implemented as a retrofit for the  library having extra features, like data structures like sets and linked sets, and has a number of algorithms to manipulate elements of a collection, like finding the largest element based on some Comparator object, finding the smallest element, finding sublists within a list, reverse the contents of a list, shuffle the contents of a list, create immutable versions of a collection, performs sorts, and make binary searches..The C# collections framework consists of classes from the  and the  namespaces with a number of useful interfaces, abstract classes, and data structures. Net 3.5 added  namespace contains various extension methods for querying collections, such as , , , , ,  and many others. Queries using these methods are called LINQ queries.
|-
! In both languages arrays are covariant. This means that a  array is assignable to variables of  because  is a specialization of (assignable to) . In both languages the arrays will perform a type check when inserting new values because type-safety would otherwise be compromised. This is in contrast to how generic collections have been implemented in both languages..In both languages arrays are covariant. This means that a  array is assignable to variables of  because  is a specialization of (assignable to) . In both languages the arrays will perform a type check when inserting new values because type-safety would otherwise be compromised. This is in contrast to how generic collections have been implemented in both languages.
|-
! No multidimensional arrays (rectangular arrays), but arrays of references to arrays (jagged array)..Multidimensional arrays (rectangular arrays), as well as arrays of references to arrays (jagged array).
|-
! The  statement accepts either arrays or s. All collections implement . This means that the same short syntax can be used in for-loops..The  statement iterates through a sequence using the  or interface. Because arrays always implicitly implement these interfaces, the loop will iterate through arrays as well.
|}