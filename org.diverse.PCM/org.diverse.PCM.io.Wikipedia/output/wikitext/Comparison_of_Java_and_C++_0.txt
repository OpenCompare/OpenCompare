{| class="wikitable"
|+ 
|-
|
! Java
|-
! Allows procedural programming, functional programming, object-oriented programming, generic programming, and template metaprogramming. Favors a mix of paradigms.
| Allows procedural programming, functional programming (since Java 8) and generic programming (since Java 5), but strongly encourages the object-oriented programming paradigm. Includes support for the creation of scripting languages.
|-
! Compatible with C source code, except for a few corner case.
| Provides the Java Native Interface and recently Java Native Access as a way to directly call C/C++ code.
|-
! Has multiple binary compatibility standards (commonly Microsoft (for MSVC compiler) and Itanium/GNU (for virtually all other compilers)).
| Has a single, OS- and compiler-independent binary compatibility standard.
|-
! Optional automated bounds checking (e.g., the  method in  and  containers).
| All operations are required to be Bound-checked by all compliant distributions of Java. HotSpot can remove bounds checking.
|-
! Provides object types and type names. Allows reflection through RTTI.
| Is reflective, allowing metaprogramming and dynamic code generation at runtime.
|-
! Runs as native executable machine code for the target instruction set(s).
| Runs in a virtual machine.
|-
! Strongly influenced by C syntax, with Object-Oriented features added.
| Strongly influenced by C++/C syntax.
|-
! Supports native unsigned arithmetic.
| No native support for unsigned arithmetic.
|-
! Write once, compile anywhere (WOCA).
| Write once, run anywhere / everywhere (WORA / WORE).
|}