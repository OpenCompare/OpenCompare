<html> <head>
    		<meta charset="utf-8"/>
    </head><body><h1></h1><table border="1"><tr><th></th><th>Languages</th><th>Languages</th><th>Languages</th><th>returns integer</th><th>Base index</th><th>Languages</th><th>Languages</th><th>Languages</th><th>Languages</th><th>Languages</th><th>returns string</th><th>If not found</th><th>Languages</th><th>OR  returns Boolean.</th><th>Languages</th><th>If not found</th><th>returns string</th><th>Format string syntax</th><th>returns integer</th><th>returns an integer number</th><th>returns integer</th><th>Languages</th><th>returns integer.</th><th>Languages</th><th>If not found</th><th>returns string.</th><th></th><th>Returns</th><th>returns string 
  returns string</th><th>Languages</th><th>Languages</th><th>Languages</th><th>Languages</th><th>Languages</th><th>returns string</th><th>Languages</th><th>Languages</th><th>returns a list of strings joined with a separator</th><th>returns string</th><th>Languages</th><th>Languages</th><th>returns string</th><th>returns character.</th><th>Languages</th><th>returns boolean</th><th>returns string</th><th>Languages</th><th>Languages</th></tr>
<tr><th></th><td><span title="null">Objective-C ( only, iOS 8+/OS X 10.10+)</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th>, or
, or</th><td><span title="null">REXX</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td><td><span title="null">returns NIL</span></td></tr>
<tr><th></th><td><span title="null">C</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns a substring of string between starting at startpos and endpos, or starting at startpos of length numChars.  The resulting string is truncated if there are fewer than numChars characters beyond the starting point. endpos represents the index after the last character in the substring.</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td><td><span title="null">returns -1</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 13)</span></td></tr>
<tr><th>Description</th><td><span title="null">Joins the list of strings into a new string, with the separator string between each of the substrings. Opposite of split.</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">Java, JavaScript</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the right n part of a string. If n is greater than the length of the string then most implementations return the whole string (exceptions exist - see code examples).</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">Bash shell</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td></tr>
<tr><th></th><td><span title="null">ISLISP</span></td></tr>
<tr><th></th><td><span title="null">JavaScript</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th>, where  can be any of  and  (the verbal operators are case-insensitive)</th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp, ISLISP</span></td></tr>
<tr><th></th><td><span title="null">Pascal, Object Pascal (Delphi)</span></td></tr>
<tr><th></th><td><span title="null">Java, JavaScript</span></td></tr>
<tr><th></th><td><span title="null">JavaScript, PHP</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Cobra, Python, Go</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">Bourne Shell</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">returns NSNotFound</span></td><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the left n part of a string. If n is greater than the length of the string then most implementations return the whole string (exceptions exist - see code examples).</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Java, JavaScript</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Perl, PHP</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">C++ (STL)</span></td><td><span title="null">returns std::string::npos</span></td></tr>
<tr><th></th><td><span title="null">ISLISP</span></td></tr>
<tr><th></th><td><span title="null">Ada</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns whether string contains substring as a substring. This is equivalent to using #Find and then detecting that it does not result in the failure condition listed in the third column of the #Find section. However, some languages have a simpler way of expressing this test.</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Standard ML</span></td></tr>
<tr><th></th><td><span title="null">COBOL</span></td></tr>
<tr><th></th><td><span title="null">returns</span></td><td><span title="null">PHP</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk (Squeak, Pharo)</span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td></tr>
<tr><th></th><td><span title="null">BASIC</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 13)</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">returns Nothing</span></td><td><span title="null">Haskell (returns Just index)</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns a string with find occurrences changed to replace.</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">VB.NET</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">JavaScript</span></td></tr>
<tr><th></th><td><span title="null">Perl, PHP</span></td></tr>
<tr><th></th><td><span title="null">returns nil</span></td><td><span title="null">Ruby</span></td></tr>
<tr><th></th><td><span title="null">FreeBASIC</span></td><td><span title="null">returns 0</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">AWK (changes string), Perl, PHP</span></td></tr>
<tr><th>Description</th><td><span title="null">Concatenates (joins) two strings to each other, returning the combined string. Note that some languages like C have mutable strings, so really the second string is being appended to the first string and the mutated string is returned.</span></td></tr>
<tr><th></th><td><span title="null">FreeBASIC, Ingres</span></td></tr>
<tr><th></th><td><span title="null">C++</span></td></tr>
<tr><th></th><td><span title="null">C</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Java, JavaScript</span></td><td><span title="null">returns -1</span></td></tr>
<tr><th></th><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">Haskell</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Perl, Haskell</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Clojure</span></td></tr>
<tr><th></th><td><span title="null">VB,FreeBASIC, Ingres</span></td></tr>
<tr><th></th><td><span title="null">Haskell</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">JavaScript</span></td></tr>
<tr><th>Related</th><td><span title="null">sprintf</span></td></tr>
<tr><th></th><td><span title="null">Haskell</span></td></tr>
<tr><th></th><td><span title="null">Java</span></td></tr>
<tr><th></th><td><span title="null">Object Pascal (Delphi) (operates on one character)</span></td></tr>
<tr><th></th><td><span title="null">Python</span></td></tr>
<tr><th></th><td><span title="null">Java, JavaScript</span></td></tr>
<tr><th></th><td><span title="null">Perl, PHP, Ruby</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">Ruby, Ya</span></td></tr>
<tr><th></th><td><span title="null">FreeBASIC</span></td></tr>
<tr><th></th><td><span title="null">REXX</span></td></tr>
<tr><th></th><td><span title="null">JavaScript</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Python (before 3.0 only)</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">returns 0</span></td><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">PL/I</span></td><td><span title="null">PL/I (similar to Fortran)</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">Cobra</span></td></tr>
<tr><th>Description</th><td><span title="null">Lexicographically compares two strings using a relational operator or function. Boolean result returned.</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 13)</span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">REXX</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">C, C++, C#,Cobra, D, FreeBASIC, Go, Python, PHP, Ruby, Windows PowerShell, JavaScript, Ya</span></td></tr>
<tr><th></th><td><span title="null">Java</span></td></tr>
<tr><th>Equivalent</th><td><span title="null">See substring of length 1 character.</span></td></tr>
<tr><th>(char, can contain more them one char, in which case the position of the first appearance of any of them is returned.)</th><td><span title="null">returns 0</span></td><td><span title="null">FreeBASIC</span></td></tr>
<tr><th></th><td><span title="null">Haskell (returns Just index)</span></td><td><span title="null">returns Nothing</span></td></tr>
<tr><th></th><td><span title="null">PL/I</span></td></tr>
<tr><th></th><td><span title="null">ISLISP</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">D</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Python 3.x</span></td><td><span title="null">.NET</span></td></tr>
<tr><th></th><td><span title="null">Ingres, Perl,  Pascal, Object Pascal (Delphi), REXX, Seed7, SQL, PL/I</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, Windows PowerShell, F#</span></td></tr>
<tr><th>, where  can be any of  and  and</th><td><span title="null">Fortran.</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">ISLISP</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">SQL</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Fortran</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">C++ ( only, modifies string)</span></td></tr>
<tr><th></th><td><span title="null">Fortran</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td><td><span title="null">C</span></td></tr>
<tr><th>, where  can be any of  and  (operators starting with '' are case-insensitive)</th><td><span title="null">Scheme (SRFI 13)</span></td></tr>
<tr><th>or</th><td><span title="null">COBOL</span></td><td><span title="null">number of characters and number of bytes, respectively</span></td></tr>
<tr><th></th><td><span title="null">C, C++ ( only)</span></td></tr>
<tr><th></th><td><span title="null">Cobra, Python</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td><td><span title="null">Lisp</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">C#</span></td></tr>
<tr><th></th><td><span title="null">Haskell (GHC 6.8+)</span></td></tr>
<tr><th></th><td><span title="null">Erlang, Haskell</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk (Squeak, Pharo)</span></td></tr>
<tr><th></th><td><span title="null">Python, Ruby(1.9+)</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">returns FALSE</span></td><td><span title="null">PHP</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">returns 0</span></td><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, Windows PowerShell, F#</span></td></tr>
<tr><th></th><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">returns std::string::npos</span></td><td><span title="null">C++ (STL)</span></td></tr>
<tr><th></th><td><span title="null">Haskell</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td></tr>
<tr><th></th><td><span title="null">Scheme</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">COBOL</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">PL/I</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Scheme</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">Java, JavaScript</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">AWK</span></td><td><span title="null">returns 0</span></td></tr>
<tr><th></th><td><span title="null">Windows PowerShell</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68, Ada, Object Pascal (Delphi), OCaml, Pascal, REXX, Seed7, Standard ML, BASIC, VB, VB .NET, F#, Smalltalk, PL/I, COBOL</span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td></tr>
<tr><th></th><td><span title="null">Fortran</span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td></tr>
<tr><th></th><td><span title="null">Scheme (R6RS), Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 28)</span></td><td><span title="null">Lisp</span></td></tr>
<tr><th></th><td><span title="null">REXX</span></td><td><span title="null">returns 0</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the position of the start of the first occurrence of substring in string. If the substring is not found most of these routines return an invalid index value – -1 where indexes are 0-based, 0 where they are 1-based – or some value to be interpreted as Boolean FALSE.</span></td></tr>
<tr><th></th><td><span title="null">Object Pascal (Delphi)</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">C#</span></td></tr>
<tr><th></th><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">PL/I</span></td></tr>
<tr><th></th><td><span title="null">Java</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">BASIC (some implementations)</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">Java</span></td><td><span title="null">Number of 16-bit UTF-16-encoded blocks</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">Ada (changes base index)</span></td></tr>
<tr><th></th><td><span title="null">D</span></td><td><span title="null">returns -1</span></td></tr>
<tr><th></th><td><span title="null">Cobra, Java</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">Haskell</span></td></tr>
<tr><th></th><td><span title="null">Unix</span></td></tr>
<tr><th></th><td><span title="null">raises Not_found</span></td><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the length of a string (not counting the null terminator or any other of the string's internal structural information). An empty string returns a length of 0.</span></td></tr>
<tr><th></th><td><span title="null">BASIC, FreeBASIC, Python, Go</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Cobra, D, JavaScript</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">returns 0 (positions start at 1)</span></td><td><span title="null">PL/I</span></td></tr>
<tr><th></th><td><span title="null">Ruby, JavaScript</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the position of the start of the first occurrence of the character char in string. If the character is not found most of these routines return an invalid index value – -1 where indexes are 0-based, 0 where they are 1-based – or some value to be interpreted as Boolean FALSE. This can be accomplished as a special case of #Find, with a string of one character; but it may be simpler or more efficient in many languages to locate just one character. Also, in many languages, characters and strings are different types, so it is convenient to have such a function.</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, F#</span></td></tr>
<tr><th></th><td><span title="null">Python</span></td><td><span title="null">returns -1</span></td></tr>
<tr><th>(n must not be greater than the length of string)</th><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">Tcl</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the formatted string representation of one or more items.</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td><td><span title="null">returns -1</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68</span></td></tr>
<tr><th></th><td><span title="null">Cobra, Java (1.5+)</span></td></tr>
<tr><th></th><td><span title="null">returns NULL</span></td><td><span title="null">C, C++ ( only, returns pointer to character)</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp, ISLISP</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Windows PowerShell</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">VB .NET, C#, Windows PowerShell, F#</span></td></tr>
<tr><th>, where  can be any of  and ; Also:  and</th><td><span title="null">ALGOL 68</span></td></tr>
<tr><th></th><td><span title="null">Python</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">Haskell (GHC)</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">Fortran</span></td></tr>
<tr><th></th><td><span title="null">REXX, Erlang</span></td></tr>
<tr><th></th><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">Object Pascal (Delphi)</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68 (changes base index)</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">AWK (changes string)</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Java, JavaScript</span></td></tr>
<tr><th></th><td><span title="null">Scheme, Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68, C++ (STL), C#, Cobra, FreeBASIC, Go, Pascal, Object Pascal (Delphi), Java, JavaScript, Windows PowerShell, Python, Ruby, Rust, F#, Turing, VB, Ya</span></td></tr>
<tr><th></th><td><span title="null">C#</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">Ada</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td><td><span title="null">returns nil</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">Cobra, Python, Java (1.5+)</span></td></tr>
<tr><th></th><td><span title="null">BASIC (positions start at 1)</span></td><td><span title="null">returns 0</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td><td><span title="null">returns -1</span></td></tr>
<tr><th></th><td><span title="null">Scheme, ISLISP</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td><td><span title="null"></span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">PL/I</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">FreeBASIC</span></td></tr>
<tr><th></th><td><span title="null">Seed7</span></td><td><span title="null">returns 0</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, Windows PowerShell, F#</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">F#</span></td></tr>
<tr><th></th><td><span title="null">Python</span></td><td><span title="null">raises ValueError</span></td></tr>
<tr><th></th><td><span title="null">Python, C++ (STL), C#, Cobra, Go, JavaScript (similarity), PHP (similarity), Ruby, Erlang, Haskell, Lua, D, Mathematica, Ya</span></td></tr>
<tr><th>Description</th><td><span title="null">Reverses the order of the characters in the string.</span></td></tr>
<tr><th></th><td><span title="null">FreeBASIC</span></td></tr>
<tr><th></th><td><span title="null">Pascal, Object Pascal (Delphi)</span></td><td><span title="null">returns 0</span></td></tr>
<tr><th></th><td><span title="null">Windows PowerShell</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td><td><span title="null">.NET</span></td></tr>
<tr><th></th><td><span title="null">Fortran</span></td><td><span title="null">Fortran</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Unix</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td></tr>
<tr><th></th><td><span title="null">C++</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">Eiffel</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">Ingres</span></td><td><span title="null">returns string length + 1</span></td></tr>
<tr><th></th><td><span title="null">evaluate  which is a  (or any object understanding value) 
 returns 0 
 returns  or</span></td><td><span title="null">Smalltalk</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">PHP (deprecated in 5.3)</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk</span></td></tr>
<tr><th></th><td><span title="null">Fortran</span></td></tr>
<tr><th></th><td><span title="null">C, C++ ( only, returns pointer to first character)</span></td><td><span title="null">returns NULL</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, Windows PowerShell, F#</span></td><td><span title="null">returns -1</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 13)</span></td></tr>
<tr><th></th><td><span title="null">Fortran</span></td><td><span title="null">returns 0 if substring is not in string; returns LEN(string)+1 if substring is empty</span></td></tr>
<tr><th></th><td><span title="null">returns 0</span></td><td><span title="null">Ada</span></td></tr>
<tr><th></th><td><span title="null">Ya</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the string in lower case.</span></td></tr>
<tr><th></th><td><span title="null">PL/I</span></td></tr>
<tr><th></th><td><span title="null">OCaml, Standard ML, F#</span></td></tr>
<tr><th></th><td><span title="null">VB (positions start at 1)</span></td><td><span title="null">returns 0</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Scheme</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">Python, Ruby</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">Smalltalk (w/ bounds checking)</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk (Squeak, Pharo)</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">VB .NET, C#, Windows PowerShell, F#</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">REXX, SQL, PL/I</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk (Squeak, Pharo)</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk (Squeak, Pharo)</span></td><td><span title="null">evaluate aBlock which is a block closure (or any object understanding value) 
 returns 0</span></td></tr>
<tr><th></th><td><span title="null">PL/I</span></td><td><span title="null">returns 0 (positions start at 1)</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td></tr>
<tr><th></th><td><span title="null">returns nil</span></td><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">Fortran</span></td></tr>
<tr><th></th><td><span title="null">Pascal, Object Pascal (Delphi)</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">Smalltalk</span></td></tr>
<tr><th></th><td><span title="null">Python (since 3.0)</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68, Ada, Erlang, Fortran, Haskell</span></td></tr>
<tr><th></th><td><span title="null">C (string / char array)</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 13)</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">BASIC</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">Ada, FreeBASIC, Seed7, BASIC, VB, VB .NET, COBOL (between literals only)</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">Python</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th>, where  can be any of  and  (operators starting with '' are case-insensitive)</th><td><span title="null">Scheme</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">C++ (STL), C#, D, Go, JavaScript, Python, PHP, Ruby, Ya</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">returns zero</span></td><td><span title="null">Fortran</span></td></tr>
<tr><th></th><td><span title="null">Scheme</span></td></tr>
<tr><th>Related</th><td><span title="null">instr</span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td></tr>
<tr><th></th><td><span title="null">VB, Object Pascal (Delphi)</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk (Squeak, Pharo)</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk</span></td></tr>
<tr><th></th><td><span title="null">ISLISP</span></td><td><span title="null">returns</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td><td><span title="null">raises Not_found</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">OCaml, F#</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68</span></td><td><span title="null">returns BOOL: TRUE or FALSE, and position in REF INT pos.</span></td></tr>
<tr><th></th><td><span title="null">COBOL</span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">AWK (changes string), Perl, PHP</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68</span></td><td><span title="null">ALGOL</span></td></tr>
<tr><th>Related</th><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">SQL</span></td><td><span title="null">returns 0 (positions start at 1)</span></td></tr>
<tr><th></th><td><span title="null">Object Pascal (Delphi)</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Tcl</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">JavaScript</span></td></tr>
<tr><th></th><td><span title="null">REXX, Erlang</span></td></tr>
<tr><th></th><td><span title="null">SQL</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th>, where  can be any of  and   (operators starting with '' are case-sensitive)</th><td><span title="null">Windows PowerShell</span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">BASIC,VB</span></td></tr>
<tr><th></th><td><span title="null">Haskell</span></td></tr>
<tr><th></th><td><span title="null">Cobra, Python (2.3+)</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td><td><span title="null">returns NSNotFound</span></td></tr>
<tr><th></th><td><span title="null">C++ (STL)</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td></tr>
<tr><th></th><td><span title="null">Windows PowerShell</span></td><td><span title="null">.NET</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">COBOL</span></td></tr>
<tr><th></th><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the position of the start of the last occurrence of substring in string. If the substring is not found most of these routines return an invalid index value – -1 where indexes are 0-based, 0 where they are 1-based – or some value to be interpreted as Boolean FALSE.</span></td></tr>
<tr><th></th><td><span title="null">Python</span></td></tr>
<tr><th></th><td><span title="null">Cobra, Go, Python</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td><td><span title="null">Number of bytes</span></td></tr>
<tr><th></th><td><span title="null">BASIC</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">Java</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, F#</span></td></tr>
<tr><th>Related</th><td><span title="null">instrrev</span></td></tr>
<tr><th></th><td><span title="null">returns</span></td><td><span title="null">ISLISP</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">Ada</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 13)</span></td></tr>
<tr><th></th><td><span title="null">JavaScript</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td></tr>
<tr><th></th><td><span title="null">C++</span></td></tr>
<tr><th></th><td><span title="null">Windows PowerShell</span></td></tr>
<tr><th></th><td><span title="null">raises Not_found</span></td><td><span title="null">OCaml</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns the string in upper case.</span></td></tr>
<tr><th></th><td><span title="null">Java</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">Python, Ruby</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">Object Pascal</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">Python</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">C#, VB .NET, Windows PowerShell, F#</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, F#</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">C++ (STL)</span></td></tr>
<tr><th>Description</th><td><span title="null">Returns character at index in the string.</span></td></tr>
<tr><th></th><td><span title="null">SQL</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td><td><span title="null">returns 0</span></td></tr>
<tr><th></th><td><span title="null">Ruby, D (modifies string)</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Python</span></td></tr>
<tr><th></th><td><span title="null">C, PHP</span></td><td><span title="null">Number of bytes</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">ISLISP</span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td></tr>
<tr><th></th><td><span title="null">Windows PowerShell</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">Java, JavaScript</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, Windows PowerShell, F#</span></td><td><span title="null">Number of 16-bit UTF-16-encoded blocks</span></td></tr>
<tr><th></th><td><span title="null">Ada</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">Unix</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">REXX, Seed7</span></td></tr>
<tr><th></th><td><span title="null">ISLISP</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td></tr>
<tr><th></th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 13)</span></td></tr>
<tr><th></th><td><span title="null">Object Pascal (Delphi)</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">ALGOL 68, Pascal, Object Pascal (Delphi), Seed7</span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td><td><span title="null">returns FALSE</span></td></tr>
<tr><th></th><td><span title="null">Haskell</span></td><td><span title="null">Number of Unicode codepoints</span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td></tr>
<tr><th></th><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">COBOL</span></td></tr>
<tr><th>Are available in the syntax, but means comparison of the pointers pointing to the strings, not of the string contents.</th><td><span title="null">C, Java</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">returns 0</span></td><td><span title="null">VB</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk</span></td></tr>
<tr><th></th><td><span title="null">PHP</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, Windows PowerShell, F#</span></td></tr>
<tr><th></th><td><span title="null">Scheme (SRFI 13)</span></td><td><span title="null">returns #f</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">Smalltalk</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">C++ (STL) (w/ bounds checking)</span></td></tr>
<tr><th></th><td><span title="null">Python</span></td></tr>
<tr><th></th><td><span title="null">C++ (STL), JavaScript</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">C++ (STL)</span></td></tr>
<tr><th></th><td><span title="null">returns BOOL: TRUE or FALSE, and position in REF INT pos.</span></td><td><span title="null">ALGOL 68</span></td></tr>
<tr><th></th><td><span title="null">Seed7</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th>Description</th><td><span title="null">Compares two strings to each other.  If they are equivalent, a zero is returned. Otherwise, most of these routines will return a positive or negative result corresponding to whether string is lexicographically greater than, or less than, respectively, than string. The exceptions are the Scheme and REXX routines which return the index of the first mismatch.</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, F#</span></td></tr>
<tr><th></th><td><span title="null">returns NIL</span></td><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Javascript, Java, Ruby</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">Perl</span></td></tr>
<tr><th></th><td><span title="null">Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">C, PHP</span></td></tr>
<tr><th></th><td><span title="null">BASIC, VB, VB .NET, Pascal, Object Pascal (Delphi), OCaml, PHP, Seed7, Standard ML, F#, COBOL, Cobra</span></td></tr>
<tr><th></th><td><span title="null">Bourne Shell</span></td></tr>
<tr><th></th><td><span title="null">REXX</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th>Related</th><td><span title="null">find</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td></tr>
<tr><th></th><td><span title="null">COBOL</span></td></tr>
<tr><th></th><td><span title="null">returns nil</span></td><td><span title="null">Ruby</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68 - note: the operator "ne" is literally in bold type-font.</span></td></tr>
<tr><th></th><td><span title="null">Turbo Pascal</span></td></tr>
<tr><th></th><td><span title="null">JavaScript</span></td></tr>
<tr><th></th><td><span title="null">OCaml</span></td></tr>
<tr><th></th><td><span title="null">0</span></td><td><span title="null">Haskell</span></td></tr>
<tr><th></th><td><span title="null">JavaScript, PHP</span></td></tr>
<tr><th></th><td><span title="null">returns NIL</span></td><td><span title="null">Common Lisp</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">C++ (STL), C#, Go, JavaScript (not similar), PHP (not similar), Python, Ruby, D, Mathematica</span></td></tr>
<tr><th></th><td><span title="null">Fortran, PL/I</span></td></tr>
<tr><th>, where  can be any of  and</th><td><span title="null">Pascal, Object Pascal (Delphi), OCaml, Seed7, Standard ML, BASIC, VB, VB .NET, F#</span></td></tr>
<tr><th></th><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">Perl, PHP</span></td></tr>
<tr><th></th><td><span title="null">Windows PowerShell</span></td></tr>
<tr><th></th><td><span title="null">PL/I</span></td></tr>
<tr><th>or</th><td><span title="null">Ya</span></td><td><span title="null">number of bytes as</span></td></tr>
<tr><th></th><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">C (operates on one character)</span></td></tr>
<tr><th></th><td><span title="null">Bash shell</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">D</span></td></tr>
<tr><th></th><td><span title="null">Haskell (GHC 6.6+)</span></td></tr>
<tr><th></th><td><span title="null">≥1</span></td><td><span title="null">Ada</span></td></tr>
<tr><th></th><td><span title="null">Tcl</span></td></tr>
<tr><th></th><td><span title="null">returns -1</span></td><td><span title="null">Go</span></td></tr>
<tr><th></th><td><span title="null">returns 0</span></td><td><span title="null">FreeBASIC</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">ALGOL 68</span></td></tr>
<tr><th></th><td><span title="null">returns std::string::npos</span></td><td><span title="null">C++ (STL)</span></td></tr>
<tr><th></th><td><span title="null">Common Lisp</span></td><td><span title="null">Lisp</span></td></tr>
<tr><th></th><td><span title="null">SNOBOL</span></td></tr>
<tr><th>where  can be any of  and</th><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">COBOL</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">Cobra</span></td></tr>
<tr><th></th><td><span title="null">Lua, Smalltalk</span></td></tr>
<tr><th></th><td><span title="null">OCaml, F#</span></td><td><span title="null">C</span></td></tr>
<tr><th></th><td><span title="null">VB .NET, C#, F#</span></td><td><span title="null">.NET</span></td></tr>
<tr><th></th><td><span title="null">F#</span></td></tr>
<tr><th></th><td><span title="null">Clojure</span></td></tr>
<tr><th></th><td><span title="null">C standard library</span></td></tr>
<tr><th></th><td><span title="null">REXX</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td><td><span title="null">returns nil</span></td></tr>
<tr><th>where  can be any of  as well as worded equivalents</th><td><span title="null">COBOL</span></td></tr>
<tr><th></th><td><span title="null">Erlang</span></td></tr>
<tr><th></th><td><span title="null">Ruby</span></td></tr>
<tr><th></th><td><span title="null">VB</span></td><td><span title="null"></span></td></tr>
<tr><th></th><td><span title="null">Object Pascal (Delphi)</span></td></tr>
<tr><th></th><td><span title="null">Standard ML</span></td><td><span title="null">returns string length</span></td></tr>
<tr><th></th><td><span title="null">Cobra, Java</span></td></tr>
<tr><th></th><td><span title="null">1</span></td><td><span title="null">Lua</span></td></tr>
<tr><th></th><td><span title="null">Objective-C ( only)</span></td></tr>
<tr><th></th><td><span title="null">Fortran</span></td></tr>
<table></body></html>