<html> <head>
    		<meta charset="utf-8"/>
    </head><body><h1></h1><table border="1"><tr><th></th><th>Critics</th><th>Procedural</th><th>Description</th><th>"You can know the name of a bird in all the languages of the world, but when you're finished, you'll know absolutely nothing whatever about the bird... So let's look at the bird and see what it's doing-- that's what counts. I learned very early the difference between knowing the name of something and knowing something.</th><th>Main characteristics</th><th>Related paradigm(s)</th><th>Examples</th><th>”</th><th>Object-oriented</th></tr>
<tr><th>Declarative</th><td><span title="null"></span></td><td><span title="null">Defines computation logic without defining its detailed control flow</span></td><td><span title="null">4GL, spreadsheet, report program generator</span></td><td><span title="null"></span></td><td><span title="null">SQL, regular expressions, CSS, Prolog</span></td></tr>
<tr><th>Object-oriented</th><td><span title="null">See here and</span></td><td><span title="null">Treats datafields as objects manipulated through pre-defined methods only</span></td><td><span title="null">Objects, methods, message passing, information hiding, data abstraction, encapsulation, polymorphism, inheritance, serialization-marshalling</span></td><td><span title="null"></span></td><td><span title="null">Common Lisp, C++, C#, Eiffel, Java, PHP, Python, Ruby, Scala</span></td></tr>
<tr><th> </th><td><span title="null"></span></td><td><span title="null"></span></td></tr>
<tr><th>Paradigm</th><td><span title="null">Critics?</span></td><td><span title="null">Description</span></td><td><span title="null">Main characteristics</span></td><td><span title="null">Related paradigm(s)</span></td><td><span title="null">Examples</span></td></tr>
<tr><th></th><td><span title="null"></span></td><td><span title="null"></span></td></tr>
<tr><th>Functional</th><td><span title="null"></span></td><td><span title="null">Treats computation as the evaluation of mathematical functions avoiding state and mutable data</span></td><td><span title="null">Lambda calculus, compositionality, formula, recursion, referential transparency, no side effects</span></td><td><span title="null">Declarative</span></td><td><span title="null">Erlang, Haskell, Lisp, Clojure, Scala, SML, F#, SequenceL, Python</span></td></tr>
<tr><th>Structured</th><td><span title="null"></span></td><td><span title="null">A style of imperative programming with more logical program structure</span></td><td><span title="null">Structogram, indentation, either no, or limited use of, goto statements</span></td><td><span title="null">Imperative</span></td><td><span title="null">C, C++, Java, Python</span></td></tr>
<tr><th>Imperative</th><td><span title="null">Edsger W. Dijkstra, Michael A. Jackson</span></td><td><span title="null">Computation as statements that directly change a program state (datafields)</span></td><td><span title="null">Direct assignments, common data structure, global variable</span></td><td><span title="null"></span></td><td><span title="null">C, C++, Java, PHP, Python</span></td></tr>
<tr><th>Event-driven including time driven</th><td><span title="null"></span></td><td><span title="null">Program flow is determined mainly by events, such as mouse click or interrupts including timer</span></td><td><span title="null">Main loop, event handlers, asynchronous processes</span></td><td><span title="null">Procedural, dataflow</span></td><td><span title="null">ActionScript</span></td></tr>
<tr><th>Automata-based programming</th><td><span title="null"></span></td><td><span title="null">Treats programs as a model of a finite state machine or any other formal automata</span></td><td><span title="null">State enumeration, control variable, state changes, isomorphism, state transition table</span></td><td><span title="null">Imperative, event-driven</span></td><td><span title="null">AsmL</span></td></tr>
<tr><th>Procedural</th><td><span title="null"></span></td><td><span title="null">Derived from structured programming, based on the concept of modular programming or the procedure call</span></td><td><span title="null">Local variable, sequence, selection, iteration, and modularization</span></td><td><span title="null">Structured, imperative</span></td><td><span title="null">C, C++, Lisp, PHP, Python</span></td></tr>
<table></body></html>