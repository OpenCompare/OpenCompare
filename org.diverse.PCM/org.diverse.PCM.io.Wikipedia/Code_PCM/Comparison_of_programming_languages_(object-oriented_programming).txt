{{cleanup|reason=This article's [[#References and notes|reference section]] contains many footnotes, but not does not list any external references or sources.|date=June 2013}}
{{ProgLangCompare}}
This '''Comparison of programming languages''' compares how [[object-oriented programming]] languages such as [[C++]], [[Python (programming language)|Python]], [[Perl]], [[Java (programming language)|Java]], [[Object Pascal]] and others manipulate [[data structures]].
__TOC__
{{-}}

== Object construction and destruction ==
{| class="wikitable"
|-
! 
! construction
! destruction
|-
| [[ABAP Objects]]
| <tt>'''data''' variable '''type ref to''' class '''.'''<br />'''create object''' variable «'''exporting''' parameter = argument<ref>'''parameter = argument''' may be repeated if the constructor has several parameters</ref>»'''.'''</tt>
|<ref>[[SAP R/3|SAP]] reserved to himself the use of destruction</ref><ref name="gc">This language uses [[garbage collection (computer science)|garbage collection]] to release unused memory.</ref><!-- I'm not sure if that is the best way to say that. -->
|-
| [[C++]] ([[Standard Template Library|STL]])
| <tt>class variable«'''('''parameters''')'''»''';''' or<br /> class '''[[Pointer (computer programming)|*]]'''variable '''= [[new (C++)|new]] '''class«'''('''parameters''')'''»''';'''</tt>
| <tt>'''[[delete (C++)|delete]]''' pointer''';'''</tt>
|-
| [[C Sharp (programming language)|C#]]
| rowspan=3|<tt>class variable '''= new''' class'''('''parameters''');</tt>
| <tt>variable'''.Dispose();'''<ref name="gc" /></tt>
|-
| [[Java (programming language)|Java]]
|<ref name="gc" />
|-
| [[D (programming language)|D]]
| <tt>'''delete''' variable''';'''</tt>
|-
| [[Objective-C]] ([[Cocoa (API)|Cocoa]])
| <tt>class '''[[Pointer (computer programming)|*]]'''variable '''= [['''class''' alloc ] init];''' or <br /> class '''[[Pointer (computer programming)|*]]'''variable '''= [['''class''' alloc ] '''initWithFoo''':'''parameter «bar''':'''parameter ...»'''];'''</tt>
| <tt>'''['''variable '''release];'''</tt>
|-
| [[Swift (Apple programming language)|Swift]]
| <tt>'''let''' variable '''=''' class'''('''parameters''')'''</tt>
| 
|-
| [[Python (programming language)|Python]]
| <tt>variable '''=''' class'''('''parameters''')'''</tt>
| <tt>'''del''' variable<ref name="gc" /> (Normally not needed)</tt>
|-
| [[Visual Basic .NET]]
| <tt>'''Dim''' variable '''As New''' class'''('''parameters''')'''</tt>
| <tt>variable'''.Dispose()'''<ref name="gc" /></tt>
|-
| [[Xojo]]
| <tt>'''Dim''' variable '''As New''' class'''('''parameters''')'''</tt>
| <tt>variable = '''Nil'''</tt>
|-
| [[Eiffel (programming language)|Eiffel]]
| <tt>'''create''' variable or<br />'''create''' «'''{'''TYPE'''}'''» variable'''.'''make_foo «'''('''parameters''')'''» or<br /> variable ''':= create''' '''{'''TYPE'''}''' or<br /> variable ''':= create {'''TYPE'''}.'''make_foo «'''('''parameters''')'''» </tt>
|<ref name="gc" />
|-
| [[PHP]]
| <tt>'''[[sigil (computer programming)|$]]'''variable '''= new''' class'''('''parameters''');'''</tt>
| <tt>'''unset($'''variable''');'''</tt>
|-
| [[Perl]] 5
| <tt>«'''my '''»'''$'''variable '''=''' class'''->new'''«'''('''parameters''')'''»''';'''</tt>
| <tt>'''undef($'''variable''');'''</tt>
|-
| [[Perl 6]]
| <tt>«'''my '''»$variable '''=''' class'''.new'''«'''('''parameters''')'''»''';'''</tt>
| <tt>$variable'''.undefine;'''</tt>
|-
| [[Ruby (programming language)|Ruby]]
| <tt>variable '''=''' class'''.new'''«'''('''parameters''')'''»</tt>
|<ref name="gc" />
|-
| [[Windows PowerShell]]
| <tt>'''$'''variable '''= New-Object '''«'''-TypeName'''» class ««'''-ArgumentList'''» parameters»</tt>
| <tt>'''Remove-Variable''' «'''-Name'''» variable</tt>
|-
| [[OCaml]]
| <tt>'''let''' variable '''= new''' class «parameters» or <br /> '''let''' variable '''= object''' members '''end'''<ref>OCaml objects can be created directly without going through a class.</ref></tt>
| rowspan=2|<ref name="gc" />
|-
| [[F Sharp (programming language)|F#]]
| <tt>'''let''' variable '''= '''«'''new''' »class'''('''«parameters»''')'''</tt>
|-
| [[Smalltalk]]
| "The class is an Object.<br/>Just send a message to a class, usually <tt>#new</tt> or <tt>#new:</tt>, and many others, for example:"
<source lang="smalltalk">
Pointy x: 10 y: 20.
Array with: -1 with: 3 with: 2.
</source>
|
|-
| [[JavaScript]]
| <tt>'''var''' variable '''= new''' class«(parameters)» or <br /> '''var''' variable '''= {''' «key1''':''' value1«''',''' key2''':''' value2 ...»»'''}'''</tt>
|<ref name="gc" />
|-
| [[Object Pascal|Object Pascal / Delphi]]
| <tt>ClassVar ''':=''' ClassType.ConstructorName'''('''parameters''');</tt>
| <tt>ClassVar'''.Free;'''</tt>
|-
| [[Scala (programming language)|Scala]]
| <source lang="scala">
val obj = new Object // no parameters
val obj = new Object(arg0, arg1, arg2...)
val obj = Object(arg0, arg1, arg2...) // case class
val obj = new Object(arg0, arg1, param1 = value1, ...) // named parameters
</source>
|<ref name="gc" />
|-
| [[COBOL]]
| <code>'''INVOKE''' class '''"NEW"''' '''RETURNING''' variable or <br/> '''MOVE''' class'''::"NEW"''' '''TO''' variable</code>
|
|-
| [[Cobra (programming language) |Cobra]]
| <tt>variable «'''as''' class» '''=''' class'''('''parameters''')'''</tt>
| <tt>variable'''.dispose'''</tt>
|}

== Class declaration ==
{| class="wikitable"
|-
! 
! [[class (computer science)|class]]
! [[Protocol (object-oriented programming)|protocol]]
! [[namespace]]
|-
| ABAP Objects
| <tt>'''class''' name '''definition''' «'''inheriting from''' parentclass»'''.''' «'''interfaces:''' interfaces'''.'''» method_and_field_declarations '''endclass.'''<br />'''class''' name '''implementation.''' method_implementations '''endclass.'''</tt>
| <tt>'''interface''' name'''.''' members '''endinterface.'''</tt>
| {{n/a}}
|-
| C++ (STL)
| <tt>'''class '''name«''' : public '''parentclasses</tt><ref name="multi">This language supports [[multiple inheritance]]. A class can have more than one parent class</ref><tt>»''' { '''members''' };'''</tt>
| 
| rowspan=2| <tt>'''namespace '''name''' { '''members''' }'''</tt>
|-
| C#
| rowspan=2| <tt>'''class '''name«''' : '''«parentclass»«''',''' interfaces»»''' { '''members''' }'''</tt>
| rowspan=2| <tt>'''interface '''name«''' : '''parentinterfaces» { '''members''' }'''</tt>
|-
| D
| <tt>'''module '''name''';''' <br /> members</tt>
|-
| Java
| rowspan=2| <tt>'''class '''name«''' extends '''parentclass»«''' implements '''interfaces»''' { '''members''' }'''</tt>
| rowspan=2| <tt>'''interface '''name«''' extends '''parentinterfaces» { '''members''' }'''</tt>
| <tt>'''package '''name''';''' members</tt>
|-
| PHP
| <tt>'''namespace '''name'''; '''members</tt>
|-
| Objective-C
| <tt>'''@interface '''name«''' : '''parentclass<ref>Not providing a parent class makes the class a root class. In practice, this is almost never done. One should generally use the conventional base class of the framework one is using, which is <code>NSObject</code> for Cocoa and GNUstep, or <code>Object</code> otherwise.</ref>»«'''<''' protocols '''>'''»''' { '''instance_fields''' } '''method_and_property_declarations''' @end <br /> @implementation '''name method_implementations''' @end'''<ref>Usually the <code>@interface</code> portion is placed into a [[header file]], and the <code>@interface</code> portion is placed into a separate source code file.</ref></tt>
| <tt>'''@protocol '''name«'''<''' parentprotocols '''>'''» members''' @end'''</tt>
| {{n/a|<ref>Prefixes to class and protocol names conventionally used as a kind of namespace</ref>}}
|-
| Swift
| <tt>'''class '''name«''' : '''«parentclass»«''',''' protocols»»''' { '''members''' }'''</tt>
| <tt>'''protocol '''name«''' : '''parentprotocols»''' { '''members''' }'''</tt>
| 
|-
| Python
| <tt>'''class '''name«'''('''parentclasses<ref name="multi" />''')'''»''':<br />{{keypress|Tab}} '''members</tt>
|<ref>In Python interfaces are classes whose methods have '''pass''' as their bodies</ref>
| <tt>'''__all__ = [ '''member1''','''member2''',... ]'''</tt>
|-
| Visual Basic .NET
| <tt>'''Class '''name«''' Inherits '''parentclass»«''' Implements '''interfaces»<br />members <br />'''End Class'''</tt>
| <tt>'''Interface '''name«''' Inherits '''parentinterfaces»<br />members <br />'''End Interface'''</tt>
| <tt>'''Namespace '''name<br />members <br />'''End Namespace'''</tt>
|-
| Xojo
| <tt>'''Class '''name«''' Inherits '''parentclass»«''' Implements '''interfaces»<br />members <br />'''End Class'''</tt>
| <tt>'''Interface '''name«''' Inherits '''parentinterfaces»<br />members <br />'''End Interface'''</tt>
| <tt>'''Module '''name<br />members <br />'''End Module'''</tt>
|-
| Eiffel
| <tt>'''class '''name«''' inherit '''parentclasses<ref name="multi" />»<br />members<br />'''end'''</tt>
| colspan=2 {{n/a}}
|-
| Perl
| <tt>'''package '''name'''; '''«'''@ISA = qw('''parentclasses<ref name="multi" />''');'''» members '''1;'''</tt>
| 
| <tt>'''package '''name''';''' members</tt>
|-
| Perl 6
| <tt>'''class '''name «'''is''' parentclass «'''is''' parentclass ...<ref name="multi" />»» «'''does''' role «'''does''' role ...»» '''{''' members '''}'''</tt>
| <tt>'''role '''name «'''does''' role «'''does''' role ...»» '''{''' members '''}'''</tt>
| <tt>'''module''' name '''{''' members '''}'''</tt>
|-
| Ruby
| <tt>'''class '''name« '''<''' parentclass» <br /> members <br /> '''end'''</tt>
| 
| <tt>'''module '''name <br /> members <br /> '''end'''</tt>
|-
| Windows PowerShell
| colspan=3 {{n/a}}
|-
| OCaml
| <tt>'''class '''name «parameters»''' = object '''«'''(self)'''» «'''inherit '''parentclass «parameters» «'''inherit '''parentclass «parameters» ...<ref name="multi" />»» members '''end'''</tt>
| 
| <tt>'''module''' name <br /> members</tt>
|-
| F#
| <tt>'''type '''name«'''('''parameters''')'''»''' '''«'''as this'''» '''= class''' «'''inherit '''parentclass«'''('''parameters''')'''» «'''as base'''»» members «'''interface''' interface '''with''' implementation «'''interface''' interface '''with''' implementation ...»» '''end'''</tt>
| <tt>'''type '''name '''= interface''' members '''end'''</tt>
| <tt>'''namespace''' name <br /> members</tt>
|-
| Smalltalk
|<ref>The class is an Object.<br/> Just send a message to the superclass (st-80) or the destination namespace (Visualworks).</ref>
| 
|<ref>The namespace is an Object.<br/>Just send a message to the parent namespace.</ref>
|-
| Object Pascal (Delphi)
| <poem><tt>'''ClassName = Class'''''' '''«('''ClassParent, Interfaces)'''»
private
// Private members(include Methods and Fields)
public
// Public members
protected
// Protected members
published
// Published members
end;</tt></poem>
| 
| <tt>'''package '''name''';''' members</tt>
|-
| Scala
| <source lang="scala">
class ConcreteClass(constructor params)
extends ParentClass
with Trait1 with Trait2 with Trait2 {
// members
}
</source>
| <source lang="scala">
trait TraitName
extends OtherTrait1
with OtherTrait2 with OtherTrait3 {
// members
}
</source>
| <source lang="scala">
package name
</source>
|-
| COBOL
| <code>'''CLASS-ID.''' name« '''INHERITS'''« '''FROM'''» parentclasses»'''.'''
<ul>'''FACTORY'''« '''IMPLEMENTS''' interfaces»'''.'''
<ul>class-members</ul>
'''END FACTORY.'''</ul>
<ul>'''OBJECT'''« '''IMPLEMENTS''' interfaces»'''.'''
<ul>instance-members</ul>
'''END OBJECT.'''</ul>
'''END CLASS''' name'''.'''</code>
| <code>'''INTERFACE-ID.''' name« '''INHERITS'''« '''FROM'''» interfaces»'''.'''
<ul>members</ul>
'''END INTERFACE''' name'''.'''</code>
| {{n/a}}
|-
| Cobra
| <tt>'''class''' name «'''inherits''' parentclass» «'''implements''' interfaces»<br />{{keypress|Tab}} members</tt>
| <tt>'''interface''' name «'''inherits''' parentinterfaces»<br />{{keypress|Tab}} members</tt>
| <tt>'''namespace''' name<br />{{keypress|Tab}} members</tt>
|}

== Class members ==

=== Constructors and destructors ===
{| class="wikitable"
|-
! 
! [[constructor (computer science)|constructor]]
! [[destructor (computer science)|destructor]]
! [[finalizer]]<ref>A [[finalizer]] is called by the garbage collector when an object is about to be garbage-collected. There is no guarantee on when it will be called or if it will be called at all.</ref>
|-
| ABAP Objects
| <tt>'''methods constructor''' «'''importing''' parameter = argument»<br />'''method constructor.''' instructions '''endmethod.'''</tt><ref>In ABAP, the constructor is to be defined like a method (see comments about method) with the following restrictions: the method name must be "constructor", and only "importing" parameters can be defined</ref>
| colspan=2 {{n/a}}
|-
| C++ (STL)
| <tt>class'''('''«parameters»''') '''«''': '''initializers</tt><ref>An optional comma-separated list of initializers for member objects and parent classes goes here. The syntax for initializing member objects is
:<tt>"member_name'''('''parameters''')'''"</tt> 
This works even for primitive members, in which case one parameter is specified and that value is copied into the member. The syntax for initializing parent classes is 
:<tt>"class_name'''('''parameters''')'''".</tt> 
If an initializer is not specified for a member or parent class, then the default constructor is used.</ref><tt>»''' { '''instructions''' }'''</tt>
| <tt>'''~'''class'''() { '''instructions''' }'''</tt>
| 
|-
| C#
| <tt>class'''('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''void Dispose(){ '''instructions''' }'''</tt>
| <tt>'''~'''class'''() { '''instructions''' }'''</tt>
|-
| D
| <tt>'''this('''«parameters»''') { '''instructions''' }'''</tt>
| 
| <tt>'''~this() { '''instructions''' }'''</tt>
|-
| Java
| <tt>class'''('''«parameters»''') { '''instructions''' }'''</tt>
| 
| <tt>'''void finalize() { '''instructions''' }'''</tt>
|-
| Eiffel
|<ref name="creation routine">Any Eiffel procedure can be used as a creation procedure, aka constructors. See Eiffel paragraph at [[Constructor (computer science)#Eiffel|Constructor (computer science)]].</ref>
| 
|<ref>Implementing '''{DISPOSABLE}.dispose''' ensures that '''dispose''' will be called when object is garbage collected.</ref>
|-
| Objective-C (Cocoa)
| <tt>'''- (id)init { '''instructions...''' return self; }''' or <br /> '''- (id)'''initWithFoo''':'''parameter «bar''':'''parameter ...»''' { '''instructions...''' return self; }'''</tt>
| <tt>'''- (void)dealloc { '''instructions''' }'''</tt>
| <tt>'''- (void)finalize { '''instructions''' }'''</tt>
|-
| Swift
| <tt>'''init('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''deinit { '''instructions''' }'''</tt>
| 
|-
| Python
| <tt>'''def __init__(self'''«''', '''parameters»'''):'''<br /> {{keypress|Tab}} instructions</tt>
| 
| <tt>'''def __del__(self):'''<br /> {{keypress|Tab}} instructions</tt>
|-
| Visual Basic .NET
| <tt>'''Sub New('''«parameters»''')'''<br /> instructions <br />'''End Sub'''</tt>
| <tt>'''Sub Dispose()'''<br /> instructions <br />'''End Sub'''</tt>
| <tt>'''Overrides Sub Finalize()'''<br /> instructions <br />'''End Sub'''</tt>
|-
| Xojo
| <tt>'''Sub Constructor('''«parameters»''')'''<br /> instructions <br />'''End Sub'''</tt>
| <tt>'''Sub Destructor()'''<br /> instructions <br />'''End Sub'''</tt>
| 
|-
| PHP
| <tt>'''function __construct('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''function __destruct() { '''instructions''' }'''</tt>
|
|-
| Perl
| <tt>'''sub new { my ($class'''«''', '''parameters»''') = @_; my $self = {}; '''instructions ...''' bless($self, $class); return $self; }'''</tt>
| <tt>'''sub DESTROY { my ($self) = @_; '''instructions''' }'''</tt>
|
|-
| Perl 6
| <tt>'''submethod BUILD {''' instructions '''}''' or<br /> «'''multi''' » '''method new('''««$self''':''' »parameters»''') { self.bless(*, '''field1 '''=>''' value1, ...''');''' ... instructions }'''</tt>
| <tt>'''submethod DESTROY {''' instructions '''}'''</tt>
| 
|-
| Ruby
| <tt>'''def initialize'''«'''('''parameters''')'''» <br /> instructions <br /> '''end'''</tt>
| colspan=2 {{n/a}}
|-
| Windows PowerShell
| colspan=3 {{n/a}}
|-
| OCaml
| <tt>'''initializer''' instructions</tt><ref>This "initializer" construct is rarely used. Fields in OCaml are usually initialized directly in their declaration. Only when additional imperative operations are needed is "initializer" used. The "parameters to the constructor" in other languages are instead specified as the parameters to the class in OCaml. See the class declaration syntax for more details.</ref>
| colspan=2 {{n/a}}
|-
| F#
| <tt>'''do''' instructions or<br /> '''new('''parameters''') = ''' expression</tt><ref>This syntax is usually used to [[method overloading|overload]] constructors</ref>
| <tt>'''member this.Dispose() =''' instructions</tt>
| <tt>'''override this.Finalize() =''' instructions</tt>
|-
| JavaScript
| <tt>'''function''' name«(«parameters») { instructions }</tt><ref>In JavaScript, constructor itself is an object.</ref>
| colspan=2 {{n/a}}
|-
| COBOL
| {{n/a}}<ref>Constructors can be emulated with a factory method returning a class instance.</ref>
| colspan=2 {{n/a}}
|-
| Cobra
| <tt>'''cue init('''parameters''')'''<br />{{keypress|Tab}} '''base.init'''<br />{{keypress|Tab}} instructions</tt>
| <tt>'''def''' dispose<br />{{keypress|Tab}} instructions</tt>
|
|}

=== Fields ===
{| class="wikitable"
|-
! 
! public
! private
! protected
! friend
|-
| ABAP Objects
| <tt>'''public section.<ref name="abapsection">Scope identifier must appear once in the file declaration, all variable declarations after this scope identifier have his scope, until another scope identifier or the end of class declaration is reached</ref> data''' field '''type''' type'''.'''</tt>
| <tt>'''private section.<ref name="abapsection" /> data''' field '''type''' type'''.'''</tt>
| <tt>'''protected section.<ref name="abapsection" /> data''' field '''type''' type'''.'''</tt>
|<ref>In ABAP, you don't declare specific fields or methods to be accessible by outside things. Rather, you declare outside classes to be friends to have access to the class's fields or methods.</ref>
|-
| C++ (STL)
| <tt>'''public: '''type field''';'''</tt>
| <tt>'''private: '''type field''';'''</tt>
| <tt>'''protected: '''type field''';'''</tt>
|<ref>In C++, you don't declare specific fields to be accessible by outside things. Rather, you declare outside functions and classes to be friends to have access to the class's fields. See [[friend function]] and [[friend class]] for more details.</ref>
|-
| C#
| rowspan=3| <tt>'''public '''type field «'''=''' value»''';'''</tt>
| rowspan=3| <tt>'''private '''type field «'''=''' value»''';'''</tt>
| <tt>'''protected '''type field «'''=''' value»''';'''</tt>
| <tt>'''internal''' type field «'''=''' value»''';'''</tt>
|-
| D
| 
| <tt>'''package''' type field «'''=''' value»''';'''</tt>
|-
| Java
| <tt>'''protected '''type field «'''=''' value»''';'''</tt>
| <tt>type field «'''=''' value»''';'''</tt>
|-
| Eiffel
| <tt>'''feature'''<br /> field: TYPE</tt>
| <tt>'''feature {NONE}'''<br /> field: TYPE</tt>
| <tt>'''feature {'''current_class'''}''' <br /> field: TYPE</tt>
| <tt>'''feature {FRIEND}''' <br /> field: TYPE</tt>
|-
| Objective-C
| <tt>'''@public '''type field''';'''</tt>
| <tt>'''@private '''type field''';'''</tt>
| <tt>'''@protected '''type field''';'''</tt>
| <tt>'''@package '''type field''';'''</tt>
|-
| Swift
| colspan=4 {{n/a}}
|-
| Smalltalk
| colspan=2 {{n/a}} 
|<ref>Just send a message to the class
<source lang="smalltalk">
class addInstVarName: field.
class removeInstVarName: field.
</source></ref>
| {{n/a}} 
|-
| Python
| <tt>'''self.'''field''' = '''value</tt><ref name="assign_value">Just assign a value to it in a method</ref>
| {{n/a}}<ref>Python doesn't have private fields - all fields are publically accessible at all times. A community convention exists to prefix implementation details with a single underscore, but this is not enforced at all by the language itself.</ref>
| colspan=2 {{n/a}}
|- valign="top"
| Visual Basic .NET
| <tt>'''Public '''field''' As '''type «'''=''' value»</tt>
| <tt>'''Private '''field''' As '''type «'''=''' value»</tt>
| <tt>'''Protected '''field''' As '''type «'''=''' value»</tt>
| <tt>'''Friend '''field''' As '''type «'''=''' value»</tt>
|- valign="top"
| Xojo
| <tt>'''Public '''field''' As '''type «'''=''' value»</tt>
| <tt>'''Private '''field''' As '''type «'''=''' value»</tt>
| <tt>'''Protected '''field''' As '''type «'''=''' value»</tt>
| {{n/a}} 
|-
| PHP
| <tt>'''public $'''field «'''=''' value»''';'''</tt>
| <tt>'''private $'''field «'''=''' value»''';'''</tt>
| <tt>'''protected $'''field «'''=''' value»''';'''</tt>
| 
|-
| Perl
| <tt>'''$self->{'''field'''} = '''value''';'''</tt><ref name="assign_value"/>
| colspan=3 {{n/a}}
|-
| Perl 6
| <tt>'''has'''« type »$'''.'''field« '''is rw'''»</tt>
| <tt>'''has'''« type »$'''!'''field</tt>
| colspan=2 {{n/a}}
|-
| Ruby
| colspan=2 {{n/a}}
| <tt>'''[[sigil (computer programming)|@]]'''field '''=''' value</tt><ref name="assign_value"/>
| 
|-
| Windows PowerShell
| <tt>'''Add-Member '''<br />«'''-MemberType '''»'''NoteProperty '''<br />«'''-Name '''»Bar «'''-Value '''»value<br />'''-InputObject '''variable</tt>
| colspan=3 {{n/a}}
|-
| OCaml
| colspan=2 {{n/a}}
| <tt>'''val''' «'''mutable'''» field '''=''' value</tt>
| rowspan=2 {{n/a}}
|-
| F#
| {{n/a}}
| <tt>'''let''' «'''mutable'''» field '''=''' value</tt>
| {{n/a}}
|-
| JavaScript
| <tt>'''this.'''field''' = '''value <br /> '''this'''["field"] = value</tt><ref name="assign_value"/>
|
|
|
|-
| COBOL
| {{n/a}}
| level-number field clauses'''.'''<ref>All class data is 'private' because the COBOL standard does not specify any way to access it.</ref>
| {{n/a}}
| {{n/a}}
|-
| Cobra
| <tt>'''var''' field «'''as''' type» «'''=''' value»</tt>
| <tt>'''var''' '''__'''field «'''as''' type» «'''=''' value»</tt>
| <tt>'''var''' '''_'''field «'''as''' type» «'''=''' value»</tt>
|
|}

=== Methods ===
{| class="wikitable"
|- valign="top"
!
! basic/void method
! value-returning method
|- valign="top"
| ABAP Objects
| <tt>'''methods''' name «'''importing''' parameter = argument» «'''exporting''' parameter = argument» «'''changing''' parameter = argument» «'''returning value('''parameter''')'''»<br />'''method''' name'''.''' instructions '''endmethod.'''<ref>The declaration and implementation of methods in ABAP are separate. '''methods''' statement is to be used inside the class definition. '''method''' (without "s") is to be used inside the class implementation. '''parameter = argument''' can be repeated if there are several parameters.</ref></tt>
|<ref>In ABAP, the return parameter name is explicitly defined in the method signature within the class definition</ref>
|- valign="top"
| C++<ref>The declaration and implementation of methods in C++ are usually separate. Methods are declared inside the class definition (which is usually included in a [[header file]]) using the syntax
: <tt>type foo'''('''«parameters»''');'''</tt>
The implementation of methods is usually provided in a separate source file, with the following syntax
: <tt>type class'''::'''foo'''('''«parameters»''') { '''instructions''' }'''</tt>
Although the body of a method ''could'' be included with the declaration inside the class definition, as shown in the table here, this is generally a bad idea. Because the class definition will need to be included with every source file which uses the fields or methods of the class, having code in the class definition will cause the method code to be compiled with every source file, increasing the size of the code. There are some circumstances, however, where it is useful to include the body of a method with the declaration. One reason is that the compiler will try to [[Inline function|inline]] methods that are included in the class declaration; so if you have a very short [[One-liner program|one-liner]] method, it may make it faster to allow the compiler to inline it, by including the body along with the declaration. Also, if you have a [[Template (programming)|template]] class or method, then all the code must be included with the declaration, because only with the code can the template be instantiated.</ref>
| rowspan=4| <tt>'''void '''foo'''('''«parameters»''') { '''instructions''' }'''</tt>
| rowspan=4| <tt>type foo'''('''«parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
|- valign="top"
| C#
|- valign="top"
| D
|- valign="top"
| Java
|- valign="top"
| Eiffel
| <tt>foo '''(''' «parameters» ''')'''<br /> '''do''' <br /> instructions <br /> '''end'''</tt>
| <tt>foo '''(''' «parameters» '''):''' TYPE <br /> '''do''' <br /> instructions... <br /> '''Result''' := value <br /> '''end'''</tt>
|- valign="top"
| Objective-C
| <tt>'''- (void)'''foo«''':'''parameter «bar''':'''parameter ...»»''' { '''instructions''' }'''</tt>
| <tt>'''- ('''type''')'''foo«''':'''parameter «bar''':'''parameter ...»»''' { '''instructions... '''return''' value'''; }'''</tt>
|- valign="top"
| Swift
| <tt>'''func '''foo'''('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''func '''foo'''('''«parameters»''') -> '''type''' { '''instructions... '''return''' value''' }'''</tt>
|- valign="top"
| Python
| <tt>'''def '''foo'''(self'''«''',''' parameters»'''):<br /> {{keypress|Tab}} '''instructions</tt>
| <tt>'''def '''foo'''(self'''«''',''' parameters»'''):<br /> {{keypress|Tab}} '''instructions'''<br /> {{keypress|Tab}} return '''value</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Sub '''Foo'''('''«parameters»''') <br /> '''instructions''' <br /> End Sub'''</tt>
| <tt>'''Function '''Foo'''('''«parameters»''') As '''type''' <br /> '''instructions <br /> ... <br /> '''Return''' value<br /> '''End Function'''</tt>
|- valign="top"
| Xojo
| <tt>'''Sub '''Foo'''('''«parameters»''') <br /> '''instructions''' <br /> End Sub'''</tt>
| <tt>'''Function '''Foo'''('''«parameters»''') As '''type''' <br /> '''instructions <br /> ... <br /> '''Return''' value<br /> '''End Function'''</tt>
|- valign="top"
| PHP
| <tt>'''function '''foo'''('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''function '''foo'''('''«parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
|- valign="top"
| Perl
| <tt>'''sub '''foo''' { my ($self'''«''', '''parameters»''') = @_; '''instructions''' }'''</tt>
| <tt>'''sub '''foo''' { my ($self'''«''', '''parameters»''') = @_; '''instructions ... '''return''' value'''; }'''</tt>
|- valign="top"
| Perl 6
| <tt>«'''has''' »«'''multi''' »'''method '''foo'''('''««$self''': ''' »parameters»''') { '''instructions''' }'''</tt>
| <tt>«'''has''' «type »»«'''multi''' »'''method '''foo'''('''««$self''': ''' »parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
|- valign="top"
| Ruby
| <tt>'''def '''foo«'''('''parameters''')'''» <br /> instructions <br /> '''end'''</tt>
| <tt>'''def '''foo«'''('''parameters''')'''» <br /> instructions <br /> expression resulting in return value <br /> '''end''' <br /> or <br /> '''def '''foo«'''('''parameters''')»''' <br /> instructions <br /> '''return''' value <br /> '''end'''</tt>
|- valign="top"
| Windows PowerShell
| <tt>'''Add-Member '''«'''-MemberType'''»''' ScriptMethod '''«'''-Name'''» foo «'''-Value'''»''' { '''«'''param('''parameters''')'''»''' '''instructions''' } -InputObject '''variable</tt>
| <tt>'''Add-Member '''«'''-MemberType'''»''' ScriptMethod '''«'''-Name'''» foo «'''-Value'''»''' { '''«'''param('''parameters''')'''»''' '''instructions ... '''return''' value '''} -InputObject '''variable</tt>
|- valign="top"
| OCaml
| rowspan=2 {{n/a}}
| <tt>'''method''' foo «parameters» '''=''' expression</tt>
|- valign="top"
| F#
| <tt>'''member this.'''foo'''('''«parameters»''') =''' expression</tt>
|- valign="top"
| JavaScript
| <tt>'''this.'''method''' = function('''«parameters»''') {'''instructions'''}''' <br /> name«.'''prototype.'''method''' = function('''«parameters»''') {'''instructions'''}'''</tt><ref name="assign_func">Just assign a function to it in a method</ref>
| <tt> '''this.'''method''' = function('''«parameters»''') {'''instructions... '''return''' value''';}''' <br /> name«.'''prototype.'''method''' = function('''«parameters»''') {'''instructions... '''return''' value;'''}'''</tt><ref name="assign_func"/>
|- valign="top"
| COBOL
| <code>'''METHOD-ID.''' foo'''.'''<br/>
«'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
parameter declarations»<br/>
'''PROCEDURE DIVISION'''« '''USING''' parameters»'''.'''
<ul>instructions</ul>
'''END METHOD''' foo'''.'''</code>
| <code>'''METHOD-ID.''' foo'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
«parameter declarations»<br/>
result-var declaration<br/>
'''PROCEDURE DIVISION'''« '''USING''' parameters» '''RETURNING''' result-var'''.'''
<ul>instructions</ul>
'''END METHOD''' foo'''.'''</code>
|-
| Cobra
| <tt>'''def''' foo'''('''parameters''')'''<br />{{keypress|Tab}} instructions</tt>
| <tt>'''def''' foo'''('''parameters''') as''' type<br />{{keypress|Tab}} instructions<br />{{keypress|Tab}} '''return''' value</tt>
|}

=== Properties ===
How to declare a property named "Bar"

==== Manually implemented ====
{| class="wikitable"
|- valign="top"
! 
! read-write
! read-only
! write-only
|- valign="top"
| ABAP Objects
| colspan=3 {{n/a}}
|- valign="top"
| C++ (STL)
| colspan=3 {{n/a}}
|- valign="top"
| C#
| <tt>type Bar '''{<br/>  get { '''instructions ... '''return '''value''';''' '''}<br/>  set { '''instructions''' } }'''</tt>
| <tt>type Bar '''{ get { '''instructions ... '''return '''value''';''' '''} }'''</tt>
| <tt>type Bar '''{ set { '''instructions''' } }'''</tt>
|- valign="top"
| D
| <tt>'''@property''' type bar'''() { '''instructions ... '''return '''value''';''' '''} <br /> @property''' type bar'''('''type value''') { '''instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>'''@property''' type bar'''() { '''instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>'''@property''' type bar'''('''type value''') { '''instructions ... '''return '''value''';''' '''}'''</tt>
|- valign="top"
| Java
| colspan=3 {{n/a}}
|- valign="top"
| Objective-C 2.0 (Cocoa)
| <tt>'''@property (readwrite)''' type bar''';''' <br /></tt> and then inside <br/><tt>@implementation <br /> '''- ('''type''')'''bar''' { '''instructions''' }''' <br /> '''- (void)'''setBar''':('''type''')'''value''' { '''instructions''' }'''</tt>
| <tt>'''@property (readonly)''' type bar''';''' <br /></tt> and then inside <br/><tt>@implementation <br /> 
'''- ('''type''')'''bar''' { '''instructions''' }'''</tt>
| {{n/a}}
|- valign="top"
| Swift
| <tt>'''var''' bar ''':''' type '''{ get { '''instructions''' } set'''«'''('''newBar''')'''»''' { '''instructions''' } }'''</tt>
| <tt>'''var''' bar ''':''' type '''{ '''instructions''' }'''</tt>
| {{n/a}}
|- valign="top"
| Eiffel
| <tt>'''feature''' -- Access <br />x: TYPE '''assign''' set_x<br /> '''feature''' -- Settings <br /> set_x (a_x: '''like''' x) '''do''' instructions '''ensure''' x_set: verification '''end'''</tt>
|
|
|- valign="top"
| Python
| <tt>'''def''' setBar'''(self, '''value'''):''' <br />{{keypress|Tab}} instructions'''<br />def''' getBar'''(self):<br />{{keypress|Tab}} '''instructions<br />{{keypress|Tab}} '''return''' value<br />bar''' = property('''getBar''',''' setBar''')'''</tt><ref>Alternative implementation:
<source lang="python">
def bar():
    doc = "The bar property."
    def fget(self):
        return self._bar
    def fset(self, value):
        self._bar = value
    return locals()
bar = property(**bar())
</source>
</ref>
| <tt>'''def''' getBar'''(self):''' <br />{{keypress|Tab}} instructions<br />{{keypress|Tab}} '''return''' value<br />bar''' = property('''getBar''')'''</tt>
| <tt>'''def''' setBar'''(self, '''value'''): '''<br />{{keypress|Tab}} instructions<br />bar''' = property(fset = '''setBar''')'''</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Property '''Bar'''() As '''type<br />'''Get<br />'''instructions<br />'''Return''' value<br />'''End Get<br />Set (ByVal '''Value''' As '''type''')'''<br />instructions'''<br />End Set<br />End Property'''</tt>
| <tt>'''ReadOnly Property '''Bar'''() As '''type<br />'''Get<br />'''instructions<br />'''Return''' value<br />'''End Get<br />End Property'''</tt>
| <tt>'''WriteOnly Property '''Bar'''() As '''type<br />'''Set (ByVal '''Value''' As '''type''')'''<br />instructions<br />'''End Set<br />End Property'''</tt>
|- valign="top"
| Xojo
| <tt>'''ComputedProperty '''Bar'''() As '''type<br />'''Get<br />'''instructions<br />'''Return''' value<br />'''End Get<br />Set (ByVal '''Value''' As '''type''')'''<br />instructions'''<br />End Set<br />End ComputedProperty'''</tt>
| <tt>'''ComputedProperty '''Bar'''() As '''type<br />'''Get<br />'''instructions<br />'''Return''' value<br />'''End Get<br />End ComputedProperty'''</tt>
| <tt>'''ComputedProperty '''Bar'''() As '''type<br />'''Set ('''value''' As '''type''')'''<br />instructions<br />'''End Set<br />End ComputedProperty'''</tt>
|- valign="top"
| PHP
| <tt>'''function __get('''$property''') {<br/> switch ('''$property''') {<br/> case ''''Bar'''' : '''instructions ... '''return''' value''';<br/> } }<br />function __set('''$property''', '''$value''') {<br/> switch ('''$property''') {<br/> case ''''Bar'''' : '''instructions'''<br/> } }'''</tt>
| <tt>'''function __get('''$property''') {<br/> switch ($'''property''') {<br/> case ''''Bar'''' : '''instructions ... '''return''' value''';<br/> } }'''</tt>
| <tt>'''function __set('''$property''', '''$value''') {<br/> switch ('''$property''') {<br/> case ''''Bar'''' : '''instructions'''<br/> } }'''</tt>
|- valign="top"
| Perl
| <tt>'''sub''' Bar {<br />   '''my''' $self = '''shift''';<br />   '''if''' ('''my''' $Bar = '''shift''') {<br />        # setter<br />        $self->{Bar} = $Bar;<br />        return $self;<br />  } '''else''' {<br />        # getter<br />        '''return''' $self->{Bar};    <br />   }<br />}</tt>
| <tt>'''sub''' Bar {<br />   '''my''' $self = '''shift''';<br />   '''if''' ('''my''' $Bar = '''shift''') {<br />        # read-only<br />        '''die''' "Bar is read-only\n";<br />  } '''else''' {<br />        # getter<br />        '''return''' $self->{Bar};    <br />   }<br />}</tt>
| <tt>'''sub''' Bar {<br />   '''my''' $self = '''shift''';<br />   '''if''' ('''my''' $Bar = '''shift''') {<br />        # setter<br />        $self->{Bar} = $Bar;<br />        return $self;<br />  } '''else''' {<br />        # write-only<br />        '''die''' "Bar is write-only\n";  <br />   }<br />}</tt>
|- valign="top"
| Perl 6
| colspan=3 {{n/a}}
|- valign="top"
| Ruby
| <tt>'''def '''bar <br /> instructions <br /> expression resulting in return value <br /> '''end''' <br /> '''def '''bar'''=('''value''')''' <br /> instructions <br /> '''end'''</tt>
| <tt>'''def '''bar <br /> instructions <br /> expression resulting in return value <br /> '''end'''</tt>
| <tt>'''def '''bar'''=('''value''')''' <br /> instructions <br /> '''end'''</tt>
|- valign="top"
| Windows PowerShell
| <tt>'''Add-Member '''<br/>«'''-MemberType '''»'''ScriptProperty '''<br/>«'''-Name '''»Bar «'''-Value '''»'''{''' instructions ... '''return''' value''' }''' <br/>«'''-SecondValue '''»'''{''' instructions '''}''' <br/>'''-InputObject '''variable</tt>
| <tt>'''Add-Member '''<br/>«'''-MemberType '''»'''ScriptProperty '''<br/>«'''-Name '''»Bar «'''-Value '''»'''{''' instructions ... '''return''' value'''}''' <br/>'''-InputObject '''variable</tt>
| <tt>'''Add-Member '''<br/>«'''-MemberType '''»'''ScriptProperty '''<br/>«'''-Name '''»Bar '''-SecondValue {''' instructions '''}''' <br/>'''-InputObject '''variable</tt>
|- valign="top"
| OCaml
| colspan=3 {{n/a}}
|- valign="top"
| F#
| <tt>'''member this.'''Bar '''with get() =''' expression '''and set('''value''') =''' expression</tt>
| <tt>'''member this.'''Bar '''=''' expression</tt>
| <tt>'''member this.'''Bar '''with set('''value''') =''' expression</tt>
|- valign="top"
| COBOL
| <code>'''METHOD-ID. GET PROPERTY''' bar'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
return-var declaration<br/>
'''PROCEDURE DIVISION RETURNING''' return-var'''.'''
<ul>instructions</ul>
'''END METHOD.'''<br/>
'''METHOD-ID. SET PROPERTY''' bar'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
value-var declaration<br/>
'''PROCEDURE DIVISION USING''' value-var'''.'''
<ul>instructions</ul>
'''END METHOD.'''</code>
| <code>'''METHOD-ID. GET PROPERTY''' bar'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
return-var declaration<br/>
'''PROCEDURE DIVISION RETURNING''' return-var'''.'''
<ul>instructions</ul>
'''END METHOD.'''</code>
| <code>'''METHOD-ID. SET PROPERTY''' bar'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
value-var declaration<br/>
'''PROCEDURE DIVISION USING''' value-var'''.'''
<ul>instructions</ul>
'''END METHOD.'''</code>
|-
| Cobra
| <tt>'''pro''' bar «'''as''' type»<br />{{keypress|Tab}} '''get'''<br />{{keypress|Tab}}{{keypress|Tab}} instructions<br />{{keypress|Tab}}{{keypress|Tab}} '''return''' value<br />{{keypress|Tab}} '''set'''<br />{{keypress|Tab}}{{keypress|Tab}} instructions</tt>
| <tt>'''get''' bar «'''as''' type»<br />{{keypress|Tab}} instructions<br />{{keypress|Tab}} '''return''' value</tt>
| <tt>'''set''' bar «'''as''' type»<br />{{keypress|Tab}} instructions</tt>

|}

==== Automatically implemented ====
{| class="wikitable"
|- valign="top"
! 
! read-write
! read-only
! write-only
|- valign="top"
| ABAP Objects
| colspan=3 {{n/a}}
|- valign="top"
| C++ (STL)
| colspan=3 {{n/a}}
|- valign="top"
| C#
| <tt>type Bar '''{  get; set; }'''</tt>
| <tt>type Bar '''{  get; private set; }'''</tt>
| <tt>type Bar '''{  private get; set; }'''</tt>
|- valign="top"
| D
| 
| 
| 
|- valign="top"
| Java
| colspan=3 {{n/a}}
|- valign="top"
| Objective-C 2.0 (Cocoa)
| <tt>'''@property (readwrite)''' type bar''';''' <br /> </tt>and then inside <tt>@implementation <br /> '''@synthesize''' bar''';'''</tt>
| <tt>'''@property (readonly)''' type bar''';''' <br /> </tt>and then inside <tt>@implementation <br /> '''@synthesize''' bar''';'''</tt>
| {{n/a}}
|- valign="top"
| Swift
| <tt>'''var''' bar ''':''' type</tt>
| <tt>'''let''' bar ''':''' type</tt>
| {{n/a}}
|- valign="top"
| Eiffel
| 
|
|
|- valign="top"
| Python
| <tt>'''@property'''<br />'''def''' bar('''self'''):<br />{{keypress|Tab}}instructions<br />'''@'''bar'''.setter'''<br />'''def''' bar('''self''', value):<br />{{keypress|Tab}}instructions</tt>
| <tt>'''@property'''<br />'''def''' bar('''self'''):<br />{{keypress|Tab}}instructions</tt>
| <tt>bar '''= property()'''<br />'''@'''bar'''.setter'''<br />'''def''' bar('''self''', value):<br />{{keypress|Tab}}instructions</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Property''' Bar '''As''' type« '''=''' initial_value» (VB 10)</tt>
| 
| 
|- valign="top"
| PHP
| 
| 
| 
|- valign="top"
| Perl<ref>these examples need the [https://metacpan.org/module/Class::Accessor Class::Accessor] module installed</ref>
| <tt>'''use''' '''base''' '''qw'''(Class::Accessor);<br />'''__PACKAGE__'''->'''mk_accessors'''('Bar');</tt>
| <tt>'''use''' '''base''' '''qw'''(Class::Accessor);<br />'''__PACKAGE__'''->'''mk_ro_accessors'''('Bar');</tt>
| <tt>'''use''' '''base''' '''qw'''(Class::Accessor);<br />'''__PACKAGE__'''->'''mk_wo_accessors'''('Bar');</tt>
|- valign="top"
| Perl 6
| colspan=3 {{n/a}}
|- valign="top"
| Ruby
| <tt>'''attr_accessor''' :bar</tt>
| <tt>'''attr_reader''' :bar</tt>
| <tt>'''attr_writer''' :bar</tt>
|- valign="top"
| Windows PowerShell
| 
| 
| 
|- valign="top"
| OCaml
| colspan=3 {{n/a}}
|- valign="top"
| F#
| <tt>'''member val''' Bar '''=''' value '''with get, set'''</tt>
| 
| 
|- valign="top"
| COBOL
| <code>level-number bar clauses '''PROPERTY.'''</code>
| <code>level-number bar clauses '''PROPERTY «WITH» NO SET.'''</code>
| <code>level-number bar clauses '''PROPERTY «WITH» NO GET.'''</code>
|-
| Cobra
| <tt>'''pro''' bar '''from var''' «'''as''' type»</tt>
| <tt>'''get''' bar '''from var''' «'''as''' type»</tt>
| <tt>'''set''' bar '''from var''' «'''as''' type»</tt>
|}

=== Overloaded operators ===

==== Standard operators ====
{| class="wikitable"
|
! unary
! binary
! function call
|-
| ABAP Objects
| colspan=3 {{n/a}}
|-
| C++ (STL)
| <tt>type '''operator'''symbol'''() { '''instructions''' }'''</tt>
| <tt>type '''operator'''symbol'''('''type operand2''') { '''instructions''' }'''</tt>
| <tt>type '''operator()('''«parameters»''') { '''instructions''' }'''</tt>
|-
| C#
| <tt>'''static '''type''' operator '''symbol'''('''type operand''') { '''instructions''' }'''</tt>
| <tt>'''static '''type''' operator '''symbol'''('''type operand1''', '''type operand2''') { '''instructions''' }'''</tt>
| {{n/a}}
|-
| D
| <tt>type '''opUnary(string''' s''')() if ('''s''' == "'''symbol'''") { '''instructions''' }'''</tt>
| <tt>type '''opBinary(string''' s''')('''type operand2''') if ('''s''' == "'''symbol'''") { '''instructions''' }''' <br /> type '''opBinaryRight(string''' s''')('''type operand1''') if ('''s''' == "'''symbol'''") { switch ('''s''') { '''instructions''' }'''</tt>
| <tt>type '''opCall('''«parameters»''') { '''instructions''' }'''</tt>
|-
| Java
| rowspan=2 colspan=3 {{n/a}}
|-
| Objective-C
|-
| Swift
| <tt>'''func''' symbol'''('''operand1 ''':''' type''') -> '''returntype''' { '''instructions''' }'''</tt> (outside class)
| <tt>'''func''' symbol'''('''operand1 ''':''' type1''', '''operand2 ''':''' type2''') -> '''returntype''' { '''instructions''' }'''</tt> (outside class)
| 
|-
| Eiffel<ref name="Eiffel operators">Although Eiffel does not support overloading of operators, it can define operators</ref>
| <tt>op_name '''alias "'''symbol'''":''' TYPE <br />'''do''' instructions '''end'''</tt>
| <tt>op_name '''alias "'''symbol'''" ('''operand: TYPE1'''):''' TYPE2 <br />'''do''' instructions '''end'''</tt>
| 
|-
| Python
| <tt>'''def __'''opname'''__(self): <br /> {{keypress|Tab}} '''instructions'''<br /> {{keypress|Tab}} return '''value</tt>
| <tt>'''def __'''opname'''__(self, '''operand2'''): <br /> {{keypress|Tab}} '''instructions'''<br /> {{keypress|Tab}} return '''value</tt>
| <tt>'''def __call__(self'''«''', '''paramters»'''): <br /> {{keypress|Tab}} '''instructions'''<br /> {{keypress|Tab}} return '''value</tt>
|-
| Visual Basic .NET
| <tt>'''Shared Operator '''symbol'''('''operand''' As '''type''') As '''type'''<br /> '''instructions''' <br /> End Operator'''</tt>
| <tt>'''Shared Operator '''symbol'''('''operand1''' As '''type''', '''operand2''' As '''type''') As '''type'''<br /> '''instructions''' <br /> End Operator'''</tt>
| {{n/a}}
|-
| Xojo
| <tt>'''Function Operator_'''name'''('''operand''' As '''type''') As '''type'''<br /> '''instructions''' <br /> End Function'''</tt>
| colspan=2 {{n/a}}
|-
| PHP
| colspan=2|<ref>PHP does not support operator overloading natively, but support can be added using the [http://pecl.php.net/package/operator "operator" PECL package].</ref>
| <tt>'''function __invoke('''«parameters»''') { '''instructions''' }''' (PHP 5.3+)</tt>
|-
| Perl
| <tt>'''use overload "'''symbol'''" => sub { my ($self) = @_; '''instructions''' };'''</tt>
| <tt>'''use overload "'''symbol'''" => sub { my ($self, '''$operand2''', '''$operands_reversed''') = @_; '''instructions''' };'''</tt>
| 
|-
| Perl 6
| <tt>«'''our''' «type »»«'''multi''' »'''method prefix:<'''symbol'''> ('''«$operand''':''' »''') {''' instructions ... '''return '''value''';''' '''}''' or<br /> «'''our''' «type »»«'''multi''' »'''method postfix:<'''symbol'''> ('''«$operand''':''' »''') {''' instructions ... '''return '''value''';''' '''}''' or<br /> «'''our''' «type »»«'''multi''' »'''method circumfix:<'''symbol1 symbol2'''> ('''«$operand''':''' »''') {''' instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>«'''our''' «type »»«'''multi''' »'''method infix:<'''symbol'''> ('''«$operand1''':''' » type operand2''') {''' instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>«'''our''' «type »»«'''multi''' »'''method postcircumfix:<( )> ('''«$self''':''' » «parameters»''') {''' instructions '''}'''</tt>
|-
| Ruby
| <tt>'''def '''symbol <br /> instructions <br /> expression resulting in return value <br /> '''end'''</tt>
| <tt>'''def '''symbol'''('''operand2''')''' <br /> instructions <br /> expression resulting in return value <br /> '''end'''</tt>
| {{n/a}}
|-
| Windows PowerShell
| rowspan=2 colspan=3 {{n/a}}
|-
| OCaml
|-
| F#
| <tt>'''static member ('''symbol''')''' operand '''=''' expression</tt>
| <tt>'''static member ('''symbol''')''' '''('''operand1''',''' operand2''') =''' expression</tt>
| {{n/a}}
|-
| COBOL
| colspan=3 {{n/a}}
|-
|}

==== Indexers ====
{| class="wikitable"
|
! read-write
! read-only
! write-only
|- valign="top"
| ABAP Objects
| colspan=3 {{n/a}}
|- valign="top"
| C++ (STL)
| <tt>type'''& operator[]('''type index''') { '''instructions''' }'''</tt>
| <tt>type '''operator[]('''type index''') { '''instructions''' }'''</tt>
| 
|- valign="top"
| C#
| <tt>type '''this['''type index'''] { <br /> get{ '''instructions''' } <br /> set{ '''instructions''' } }'''</tt>
| <tt>type '''this['''type index'''] { get{ '''instructions''' } }'''</tt>
| <tt>type '''this['''type index'''] { set{ '''instructions''' } }'''</tt>
|- valign="top"
| D
| <tt>type '''opIndex('''type index''') { '''instructions''' }''' <br /> type '''opIndexAssign('''type value''', '''type index''') { '''instructions''' }'''</tt>
| <tt>type '''opIndex('''type index''') { '''instructions''' }'''</tt>
| <tt>type '''opIndexAssign('''type value''', '''type index''') { '''instructions''' }'''</tt>
|- valign="top"
| Java
| colspan=3 {{n/a}}
|- valign="top"
| Objective-C (recent Clang compiler)
| {{n/a}}
| <tt>'''- (id)objectAtIndexedSubscript:(NSUInteger)'''index''' { '''instructions''' return '''value'''; }''' or<br />'''- (id)objectForKeyedSubscript:(id)'''index''' { '''instructions''' return '''value'''; }'''</tt>
| <tt>'''- (void)setObject:(id)'''value''' atIndexedSubscript:(NSUInteger)'''index''' { '''instructions''' }''' or<br />'''- (void)setObject:(id)'''value''' forKeyedSubscript:(id)'''index''' { '''instructions''' }'''</tt>
|- valign="top"
| Swift
| <tt>'''subscript ('''index''' : '''type''') -> '''returntype''' { get { '''instructions''' } set'''«'''('''newIndex''')'''»''' { '''instructions''' } }'''</tt>
| <tt>'''subscript ('''index''' : '''type''') -> '''returntype''' { '''instructions''' }'''</tt>
| 
|- valign="top"
| Eiffel<ref name="Eiffel operators"/>
| <tt>bracket_name '''alias "[]" ('''index: TYPE'''):''' TYPE '''assign''' set_item <br />'''do''' instructions '''end''' <br /> set_item '''('''value: TYPE; index: TYPE'''):''' <br />'''do''' instructions '''end'''</tt>
| <tt>bracket_name '''alias "[]" ('''index: TYPE'''):''' TYPE <br />'''do''' instructions '''end'''</tt>
| 
|- valign="top"
| Python
| <tt>'''def __getitem__(self, '''index'''): <br /> '''{{keypress|Tab}} instructions <br /> {{keypress|Tab}} '''return''' value <br /> '''def __setitem__(self, '''index''', '''value'''):''' <br /> {{keypress|Tab}} instructions</tt>
| <tt>'''def __getitem__(self, '''index'''): <br /> '''{{keypress|Tab}} instructions <br /> {{keypress|Tab}} '''return''' value</tt>
| <tt>'''def __setitem__(self, '''index''', '''value'''):''' <br /> {{keypress|Tab}} instructions</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Default Property Item('''Index''' As '''type''') As '''type''' <br /> Get <br /> '''instructions''' <br /> End Get <br /> Set(ByVal '''Value''' As '''type''') <br /> '''instructions''' <br /> End Set <br /> End Property'''</tt>
| <tt>'''Default ReadOnly Property Item('''Index''' As '''type''') As '''type''' <br /> Get <br /> '''instructions''' <br /> End Get <br /> End Property'''</tt>
| <tt>'''Default WriteOnly Property Item('''Index''' As '''type''') As '''type''' <br /> Set(ByVal '''Value''' As '''type''') <br /> '''instructions''' <br /> End Set <br /> End Property'''</tt>
|- valign="top"
| PHP
|colspan=3|<ref>Your class needs to implement the [http://www.php.net/manual/en/class.arrayaccess.php ArrayAccess interface].</ref>
|- valign="top"
| Perl
|colspan=3|<ref>Your class needs to overload '@{}' (array dereference)  or subclass one of Tie::Array or Tie::StdArray to hook array operations</ref>
|- valign="top"
| Perl 6
| <tt>«'''our''' «type »»«'''multi''' »'''method postcircumfix:<[ ]> is rw ('''«$self''':''' » type $index''') {''' instructions ... '''return '''value''';''' '''}''' or<br /> «'''our''' «type »»«'''multi''' »'''method postcircumfix:<{ }> is rw  ('''«$self''':''' » type $key''') {''' instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>«'''our''' «type »»«'''multi''' »'''method postcircumfix:<[ ]>('''«$self''':''' » type $index''') {''' instructions ... '''return '''value''';''' '''}''' or<br /> «'''our''' «type »»«'''multi''' »'''method postcircumfix:<{ }> ('''«$self''':''' » type $key''') {''' instructions ... '''return '''value''';''' '''}'''</tt>
| {{n/a}}
|- valign="top"
| Ruby
| <tt>'''def []('''index''')''' <br /> instructions <br /> expression resulting in return value <br /> '''end''' <br /> '''def []=('''index, value''')''' <br /> instructions <br /> '''end'''</tt>
| <tt>'''def []('''index''')''' <br /> instructions <br /> expression resulting in return value <br /> '''end'''</tt>
| <tt>'''def []=('''index, value''')''' <br /> instructions <br /> '''end'''</tt>
|- valign="top"
| Windows PowerShell
| rowspan=2 colspan=3 {{n/a}}
|- valign="top"
| OCaml
|- valign="top"
| F#
| <tt>'''member this{{Not a typo|.}}Item with get('''index''') =''' expression '''and set '''index value '''=''' expression</tt>
| <tt>'''member this{{Not a typo|.}}Item with get('''index''') =''' expression</tt>
| <tt>'''member this{{Not a typo|.}}Item with set '''index value '''=''' expression</tt>
|- valign="top"
| COBOL
| colspan=3 {{n/a}}
|-
| Cobra
| <tt>'''pro['''index «'''as''' type»'''] as''' type<br />{{keypress|Tab}} '''get'''<br />{{keypress|Tab}}{{keypress|Tab}} instructions<br />{{keypress|Tab}}{{keypress|Tab}} '''return''' value<br />{{keypress|Tab}} '''set'''<br />{{keypress|Tab}}{{keypress|Tab}} instructions</tt>
| <tt>'''get['''index «'''as''' type»'''] as''' type<br />{{keypress|Tab}} instructions<br />{{keypress|Tab}} '''return''' value</tt>
| <tt>'''set['''index «'''as''' type»'''] as''' type<br />{{keypress|Tab}} instructions</tt>
|}

==== Type casts ====
{| class="wikitable"
|
! downcast
! upcast
|-
| ABAP Objects
| colspan=2 {{n/a}}
|-
| C++ (STL)
| 
| <tt>'''operator '''returntype'''() { '''instructions''' }'''</tt>
|-
| C#
| <tt>'''static explicit operator '''returntype'''('''type operand''') { '''instructions''' }'''</tt>
| <tt>'''static implicit operator '''returntype'''('''type operand''') { '''instructions''' }'''</tt>
|-
| D
| 
| <tt>T '''opCast('''T''')() { if (is('''T''' == '''type''')) { '''instructions''' } '''...''' }'''</tt>
|-
| Java
| rowspan=4 colspan=2 {{n/a}}
|-
| Objective-C
|-
| Eiffel<ref name="Eiffel operators"/>
|-
| Python
|-
| Visual Basic .NET
| <tt>'''Shared Narrowing Operator CType('''operand''' As '''type''') As '''returntype''' <br /> '''instructions ''' <br /> End Operator''' </tt>
| <tt>'''Shared Widening Operator CType('''operand''' As '''type''') As '''returntype''' <br /> '''instructions ''' <br /> End Operator'''</tt>
|-
| Perl 6
| 
| <tt>'''multi method '''type«'''('''$self''':)'''» '''is export {''' instructions '''}'''</tt>
|-
| PHP
| rowspan=5 colspan=2 {{n/a}}
|-
| Perl
|-
| Ruby
|-
| Windows PowerShell
|-
| OCaml
|-
| F#
| 
| 
|-
| COBOL
| colspan=2 {{n/a}}
|-
|}

== Member access ==
How to access members of an object x
{| class="wikitable"
|-
! 
! colspan=3| object member
! rowspan=2| class member
! rowspan=2| namespace member
|-
! 
! method
! field
! property
|-
| ABAP Objects
| <tt>'''x->'''method'''(«'''parameters<ref name="abapparam">In ABAP, arguments must be passed using this syntax:</tt>
:'''x->'''method'''('''«'''exporting''' parameter = argument» «'''importing''' parameter = argument» «'''changing''' parameter = argument» «'''returning value('''parameter''')'''»
:'''parameter = argument''' can be repeated if there are several parameters</ref>»''').'''
| <tt>'''x->'''field</tt>
| {{n/a}}
| <tt>'''x=>'''field or '''x=>'''method'''(«'''parameters<ref name="abapparam" />»''').'''</tt>
| {{n/a}}
|-
| C++ (STL)
| <tt>'''x.'''method'''('''parameters''')''' or<br />'''ptr->'''method'''('''parameters''')'''</tt>
| <tt>'''x.'''field or<br />'''ptr->'''field</tt>
| 
| <tt>cls'''::'''member</tt>
| <tt>ns'''::'''member</tt>
|-
| Objective-C
| <tt>'''[x '''method«''':'''parameter «bar''':'''parameter ...»»''']'''</tt>
| <tt>'''x->'''field</tt>
| <tt>'''x.'''property (2.0 only) or<br />'''[x '''property''']'''</tt>
| <tt>'''['''cls method«''':'''parameter «bar''':'''parameter ...»»''']'''</tt>
| 
|-
| Smalltalk
| <tt>'''x '''method«''':'''parameter «bar''':'''parameter ...»»</tt>
| {{n/a}}
| 
| <tt>cls method«''':'''parameter «bar''':'''parameter ...»»</tt>
| 
|-
| Swift
| <tt>'''x.'''method'''('''parameters''')'''</tt>
| 
| <tt>'''x.'''property</tt>
| <tt>cls'''.'''member</tt>
| 
|-
| C#
| rowspan=8| <tt>'''x.'''method'''('''parameters''')'''</tt>
| rowspan=7| <tt>'''x.'''field</tt>
| <tt>'''x.'''property</tt>
| rowspan=6| <tt>cls'''.'''member</tt>
| rowspan=8| <tt>ns'''.'''member</tt>
|-
| Java
| {{n/a}}
|-
| D
| rowspan=6| <tt>'''x.'''property</tt>
|-
| Python 
|-
| Visual Basic .NET
|-
| Xojo
|-
| Windows PowerShell
| <tt>'''['''cls''']::'''member</tt>
|-
| F#
| {{n/a}}
| <tt>cls'''.'''member</tt>
|-
| Eiffel
| rowspan=2|<tt>'''x.'''method«'''('''parameters''')'''»</tt>
| <tt>'''x.'''field</tt>
|
| <tt>'''{'''cls'''}.'''member</tt>
| rowspan=2 {{n/a}}
|-
| Ruby
| {{n/a}}
| <tt>'''x.'''property</tt>
| <tt>cls'''.'''member</tt>
|-
| PHP
| <tt>'''x->'''method'''('''parameters''')'''</tt>
| <tt>'''x->'''field</tt>
| <tt>'''x->'''property</tt>
| <tt>cls'''::'''member</tt>
| <tt>ns'''\'''member</tt>
|-
| Perl
| <tt>'''x->'''method«'''('''parameters''')'''»</tt>
| <tt>'''x->{'''field'''}'''</tt>
| 
| <tt>cls'''->'''method«'''('''parameters''')'''»</tt>
| <tt>ns'''::'''member</tt>
|-
| Perl 6
| <tt>'''x.'''method«'''('''parameters''')'''» or<br /> '''x!'''method«'''('''parameters''')'''»</tt>
| <tt>'''x.'''field or<br /> '''x!'''field</tt>
| 
| <tt>cls'''.'''method«'''('''parameters''')'''» or<br /> cls'''!'''method«'''('''parameters''')'''»</tt>
| <tt>ns'''::'''member</tt>
|-
| OCaml
| <tt>'''x#'''method «parameters»</tt>
| colspan=2 {{n/a}}
| 
| 
|-
| JavaScript
| <tt>'''x.'''method'''('''parameters''')'''<br />'''x'''["method"]'''('''parameters''')'''</tt>
| <tt>'''x.'''field<br />'''x'''["field"]</tt>
| <tt>'''x.'''property<br />'''x'''["property"]</tt>
| {{n/a}}
| {{n/a}}
|-
| COBOL
| <code>'''INVOKE x''' '''"'''method'''"''' «'''USING''' parameters» «'''RETURNING''' result» or<br/>
'''x::"'''method'''"'''«'''('''«parameters»''')'''»</code>
| {{n/a}}
| <code>property '''OF x'''</code>
| <code>'''INVOKE''' cls '''"'''method'''"''' «'''USING''' parameters» «'''RETURNING''' result» or<br/>
cls'''::"'''method'''"'''«'''('''«parameters»''')'''» or<br/>
property '''OF''' cls</code>
| {{n/a}}
|-
| Cobra
| <tt>'''x.'''method«'''('''parameters''')'''»</tt>
| <tt>'''x.'''field</tt>
| <tt>'''x.'''property</tt>
| <tt>cls'''.'''member</tt>
| <tt>ns'''.'''member</tt>
|}

== Member availability ==
{| class="wikitable"
|-
! 
! colspan=2| Has member?
! colspan=2| Handler for missing member
|-
!
! Method
! Field
! Method
! Field
|-
| ABAP Objects
| rowspan=2 colspan=4 {{n/a}}
|-
| C++ (STL)
|-
| Objective-C (Cocoa)
| <tt>'''['''x''' respondsToSelector:@selector('''method''')]'''</tt>
| {{n/a}}
| <tt>forwardInvocation:</tt>
| {{n/a}}
|-
| Smalltalk
| <tt>x '''respondsTo:''' selector</tt>
| {{n/a}}
| <tt>doesNotUnderstand:</tt>
| {{n/a}}
|-
| C#
| rowspan=2 colspan=4| (using reflection)
|-
| Java
|-
| D
| 
| 
| colspan=2| <tt>opDispatch()</tt>
|-
| Eiffel 
| colspan=4 {{n/a}}
|-
| Python 
| <tt>'''hasattr('''x''', "'''method'''") and callable('''x'''.'''method''')'''</tt>
| <tt>'''hasattr('''x''', "'''field'''")'''</tt>
| colspan=2 | <tt>__getattr__()</tt>
|-
| Visual Basic .NET
| colspan=4 |(using reflection)
|-
| Xojo
| colspan=4 |(using Introspection)
|-
| Windows PowerShell
| colspan=4 |(using reflection)
|-
| F#
| colspan=4 |(using reflection)
|-
| Ruby
| <tt>x'''.respond_to?(:'''method''')'''</tt>
| {{n/a}}
| <tt>method_missing()</tt>
| {{n/a}}
|-
| PHP
| <tt>'''method_exists('''x''', "'''method'''")'''</tt>
| <tt>'''property_exists('''x''', "'''field'''")'''</tt>
| <tt>__call()</tt>
| <tt>__get() / __set()</tt>
|-
| Perl
| <tt>x'''->can("'''method'''")'''</tt>
| <tt>'''exists '''x'''->{'''field'''}'''</tt>
| AUTOLOAD
|
|-
| Perl 6
| <tt>x'''.can("'''method'''")'''</tt>
| <tt>x'''.'''field'''.defined'''</tt>
| AUTOLOAD
|
|-
| OCaml
| colspan=4 {{n/a}}
|-
| JavaScript 
| <tt>'''typeof '''x'''.'''method''' === "function"</tt>
| <tt>field '''in''' x</tt>
| 
| 
|-
| COBOL
| colspan=4 {{n/a}}
|}

== Special variables ==
{| class="wikitable"
|-
! 
! [[this (computer science)|current object]]
! [[this (computer science)|current object]]'s [[parent class|parent object]]
! [[Nullable type|null reference]]
! [[Context (computing)|Current Context of Execution]]
|-
| Smalltalk
| <tt>'''self'''</tt>
| <tt>'''super'''</tt>
| <tt>'''nil'''</tt>
| <tt>'''thisContext'''</tt>
|-
| ABAP Objects
| <tt>'''me'''</tt>
| <tt>'''super'''</tt>
| <tt>'''initial'''</tt>
|
|-
| C++ (STL)
| <tt>'''*this'''</tt>
|<ref>C++ doesn't have a "super" keyword, because multiple inheritance is possible, and so it may be ambiguous which base class is desired. Instead, you can use the <code>BaseClassName::member</code> syntax to access an overridden member in the specified base class. Microsoft Visual C++ provides a non-standard keyword "__super" for this purpose; but this is not supported in other compilers.[http://msdn.microsoft.com/en-us/library/94dw1w7x.aspx]</ref>
| <tt>'''NULL''', '''nullptr'''</tt>
|
|-
| C#
| rowspan=4| <tt>'''this'''</tt>
| <tt>'''base'''</tt><ref name="limited_super">The keyword here is not a value in itself and it can only be used to access a method of the superclass.</ref>
| rowspan=3| <tt>'''null'''</tt>
|
|-
| Java
| rowspan=2| <tt>'''super'''</tt><ref name="limited_super" />
|
|-
| D
| 
|-
| JavaScript
| 
| <tt>'''null''', '''undefined'''</tt><ref>But be afraid, they have not the same value.</ref>
|
|-
| Objective-C
| <tt>'''self'''</tt>
| <tt>'''super'''</tt><ref name="limited_super" />
| <tt>'''nil'''</tt>
|
|-
| Swift
| <tt>'''self'''</tt>
| <tt>'''super'''</tt><ref name="limited_super" />
| <tt>'''nil'''</tt><ref>only for Optional types</ref>
|
|-
| Python
| <tt>'''self'''<ref name="first_param_self">In this language, instance methods are passed the current object as the first parameter, which is conventionally named "self", but this is not required to be the case.</ref></tt>
| <tt>'''super('''current_class_name''', self)'''</tt><ref name="multi" /><br /><tt>'''super()'''</tt> (3.x only)
| <tt>'''None'''</tt>
|
|-
| Visual Basic .NET
| <tt>'''Me'''</tt>
| <tt>'''MyBase'''</tt>
| <tt>'''Nothing'''</tt>
|
|-
| Xojo
| <tt>'''Me / Self'''</tt>
| <tt>'''Parent'''</tt>
| <tt>'''Nil'''</tt>
|

|-
| Eiffel
| <tt>'''Current'''</tt>
| <tt>'''Precursor''' «'''{'''superclass'''}'''» «'''('''args''')'''»<ref name="limited_super" /><ref>"Precursor" in Eiffel is actually a call to the method of the same name in the superclass. So Precursor(args) is equivalent to "super.currentMethodName(args)" in Java. There is no way of calling a method of different name in the superclass.</ref></tt>
| <tt>'''Void'''</tt>
|
|-
| PHP
| <tt>'''$this'''</tt>
| <tt>'''parent'''<ref name="limited_super" /></tt>
| <tt>'''null'''</tt>
|
|-
| Perl
| <tt>'''$self'''<ref name="first_param_self" /></tt>
| <tt>'''$self->SUPER'''<ref name="limited_super" /></tt>
| <tt>'''undef'''</tt>
|
|-
| Perl 6
| <tt>'''self'''</tt>
| <tt>'''SUPER'''</tt>
| <tt>'''Nil'''</tt>
|
|-
| Ruby
| <tt>'''self'''</tt>
| <tt>'''super'''«'''('''args''')'''»<ref>"super" in Ruby, unlike in other languages, is actually a call to the method of the same name in the superclass. So super(args) in Ruby is equivalent to "super.currentMethodName(args)" in Java. There is no way of calling a method of different name in the superclass.</ref></tt>
| <tt>'''nil'''</tt>
| <tt>'''binding'''</tt>
|-
| Windows PowerShell
| <tt>'''$this'''</tt>
|
| <tt>'''$NULL'''</tt>
|
|-
| OCaml
| <tt>'''self'''<ref>In OCaml, an object declaration can optionally start with a parameter which will be associated with the current object. This parameter is conventionally named "self", but this is not required to be the case. It is good practice to put a parameter there so that one can call one's own methods.</ref></tt>
| <tt>'''super'''<ref>In OCaml, an inheritance declaration ("inherit") can optionally be associated with a value, with the syntax "'''inherit '''parent_class «parameters» '''as''' super". Here "super" is the name we gave to the variable associated with this parent object. It can be named something else.</ref></tt>
| {{n/a}}<ref>However, if you really wanted the ability to have an "optional" value in OCaml, you would wrap the value inside an <code>option</code> type, whose values are <code>None</code> and <code>Some x</code>, which could be used to represent "null reference" and "non-null reference to an object" as in other languages.</ref>
|
|-
| F#
| <tt>'''this'''</tt>
| <tt>'''base'''<ref name="limited_super" /></tt>
| <tt>'''null'''</tt>
|
|-
| COBOL
| <code>'''SELF'''</code>
| <code>'''SUPER'''</code>
| <code>'''NULL'''</code>
|
|-
| Cobra
| <tt>'''this'''</tt>
| <tt>'''base'''</tt>
| <tt>'''nil'''</tt>
|
|}

== Special methods ==
{| class="wikitable"
|-
!rowspan=2|
!colspan=2| String representation
!rowspan=2| [[Object copy]]
!rowspan=2| Value equality
!rowspan=2| Object comparison
!rowspan=2| Hash code
!rowspan=2| Object ID
|-
! Human-readable
! Source-compatible
|-
| ABAP Objects
| colspan=7 {{n/a}}
|-
| C++ (STL)
| 
| 
| 
| <tt>x '''==''' y<ref>assuming that "x" and "y" are the objects (and not a pointer). Can be customized by overloading the object's <code>==</code> operator</ref></tt>
| 
| 
| <small>pointer to object can be converted into an integer ID</small>
|-
| C#
| <tt>x'''.ToString()'''</tt>
|
| <tt>x'''.Clone()'''</tt>
| <tt>x'''.Equals('''y''')'''</tt>
| <tt>x'''.CompareTo('''y''')'''</tt>
| <tt>x'''.GetHashCode()'''</tt>
| <tt>'''System<wbr/>.Runtime<wbr/>.CompilerServices<wbr/>.RuntimeHelpers<wbr/>.GetHashCode('''x''')'''</tt>
|-
| Java
| <tt>x'''.toString()'''</tt>
|
| <tt>x'''.[[clone (Java method)|clone]]()'''<ref>Only accessible from within the class itself, since the <code>clone()</code> method inherited from <code>Object</code> is protected, unless the class overrides the method and makes it public. If you use the <code>clone()</code> inherited from <code>Object</code>, your class will need to implement the <code>Cloneable</code> interface to allow cloning.</ref></tt>
| <tt>x'''.equals('''y''')'''</tt>
| <tt>x'''.compareTo('''y''')'''<ref>The class should implement the interface <code>Comparable</code> for this method to be standardized.</ref></tt>
| <tt>x'''.hashCode()'''</tt>
| <tt>'''System<wbr/>.identityHashCode<wbr/>('''x''')'''</tt>
|-
| JavaScript
| <tt>x'''.toString()'''</tt>
|
| 
| 
| 
| 
| 
|-
| D
| <tt>x'''.toString()''' or <br /> '''std.conv<wbr/>.to!string<wbr/>('''x''')'''</tt>
| <tt>x'''.stringof'''</tt>
|
| <tt>x '''==''' y</tt>
| 
| <tt>x'''.toHash()'''</tt>
| 
|-
| Objective-C (Cocoa)
| <tt>'''['''x''' description]'''</tt>
| <tt>'''['''x''' debugDescription]'''</tt>
| <tt>'''['''x''' copy]'''<ref>Implemented by the object's <code>copyWithZone:</code> method</ref></tt>
| <tt>'''['''x''' isEqual:'''y''']'''</tt>
| <tt>'''['''x''' compare:'''y''']'''<ref><code>compare:</code> is the conventional name for the comparison method in Foundation classes. However, no formal protocol exists</ref></tt>
| <tt>'''['''x''' hash]'''</tt>
| <small>pointer to object can be converted into an integer ID</small>
|-
| Swift
| <tt>x'''.description'''<ref>Only if object conforms to the <code>Printable</code> protocol</ref></tt>
| <tt>x'''.debugDescription'''<ref>Only if object conforms to the <code>DebugPrintable</code> protocol</ref></tt>
| 
| <tt>x '''==''' y<ref>Only if object conforms to the <code>Equatable</code> protocol</ref></tt>
| <tt>x '''<''' y<ref>Only if object conforms to the <code>Comparable</code> protocol</ref></tt>
| <tt>x'''.hashValue'''<ref>Only if object conforms to the <code>hashValue</code> protocol</ref></tt>
| <tt>'''reflect('''x''')<wbr/>.objectIdentifier!<wbr/>.uintValue()'''</tt>
|-
| Smalltalk
| <tt>x '''displayString'''</tt>
| <tt>x '''printString'''</tt>
| <tt>x '''copy'''</tt>
| <tt>x '''=''' y</tt>
| 
| <tt>x '''hash'''</tt>
| <tt>x '''identityHash'''</tt>
|-
| Python
| <tt>'''str('''x''')'''<ref>Can be customized by the object's <code>__str__()</code> method</ref></tt>
| <tt>'''repr('''x''')'''<ref>Can be customized by the object's <code>__repr__()</code> method</ref></tt>
| <tt>'''copy.copy('''x''')'''<ref>Can be customized by the object's <code>__copy__()</code> method</ref></tt>
| <tt>x '''==''' y<ref>Can be customized by the object's <code>__eq__()</code> method</ref></tt>
| <tt>'''cmp('''x''', '''y''')'''<ref>Only in Python 2.x and before (removed in Python 3.0). Can be customized by the object's <code>__cmp__()</code> method</ref></tt>
| <tt>'''hash('''x''')'''<ref>Can be customized by the object's <code>__hash__()</code> method. Not all types are hashable (mutable types are usually not hashable)</ref></tt>
| <tt>'''id('''x''')'''</tt>
|-
| Visual Basic .NET
| <tt>x'''.ToString()'''</tt>
|
| <tt>x'''.Clone()'''</tt>
| <tt>x'''.Equals('''y''')'''</tt>
| <tt>x'''.CompareTo('''y''')'''</tt>
| <tt>x'''.GetHashCode()'''</tt>
| 
|-
| Eiffel
| <tt>x'''.out'''</tt>
|
| <tt>x'''.twin'''</tt>
| <tt>x'''.is_equal('''y''')'''</tt>
| When x is <tt>'''COMPARABLE'''</tt>, one can simply do <tt>x '''<''' y</tt>
| When x is <tt>'''HASHABLE'''</tt>, one can use <tt>x'''.hash_code'''</tt>
| When x is <tt>'''IDENTIFIED'''</tt>, one can use <tt>x'''.object_id'''</tt>
|-
| PHP
| <tt>'''sprintf("%s", '''x''')'''<ref>Can be customized by the object's <code>__toString()</code> method</ref></tt>
|
| <tt>'''clone''' x<ref>Can be customized by the object's <code>__clone()</code> method</ref></tt>
| <tt>x '''==''' y</tt>
| <tt><!-- x '''<=>''' y --></tt>
| 
| <tt>'''spl_object_hash('''x''')'''</tt>
|-
| Perl
| <tt>'''"'''$x'''"'''<ref name="perl_string">Can be customized by overloading the object's string conversion operator</ref></tt>
| <tt>'''Data::Dumper<wbr/>->Dump<wbr/>(['''$x'''],[''''x''''])'''<ref>This example requires '''use'''ing '''Data::Dumper'''</ref></tt>
| <tt>'''Storable<wbr/>::dclone<wbr/>('''$x''')'''<ref>This example requires '''use'''ing '''Storable'''</ref></tt>
| 
| 
| 
| <tt>'''Scalar<wbr/>::Util<wbr/>::refaddr<wbr/>( '''$x''' )'''<ref>This example requires '''use'''ing '''Scalar::Util'''</ref></tt>
|-
| Perl 6
| <tt>'''~'''x<ref name="perl_string" /></tt>
| <tt>x'''.perl'''</tt>
| <tt>x'''.clone'''</tt>
| <tt>x '''eqv''' y</tt>
| <tt>x '''cmp''' y</tt>
| 
| <tt>x'''.WHICH'''</tt>
|-
| Ruby
| <tt>x'''.to_s'''</tt>
| <tt>x'''.inspect'''</tt>
| <tt>x'''.dup''' or <br /> x'''.clone'''</tt>
| <tt>x '''==''' y or <br /> x'''.eql?('''y''')'''</tt>
| <tt>x '''<=>''' y</tt>
| <tt>x'''.hash'''</tt>
| <tt>x'''.object_id'''</tt>
|-
| Windows PowerShell
| <tt>x'''.ToString()'''</tt>
|
| <tt>x'''.Clone()'''</tt>
| <tt>x'''.Equals('''y''')'''</tt>
| <tt>x'''.CompareTo('''y''')'''</tt>
| <tt>x'''.GetHashCode()'''</tt>
| 
|-
| OCaml
| 
| 
| <tt>'''Oo.copy''' x</tt>
| <tt>x '''=''' y</tt>
|
| <tt>'''Hashtbl<wbr/>.hash''' x</tt>
| <tt>'''Oo.id''' x</tt>
|-
| F#
| <tt>'''string''' x or x'''<wbr/>.ToString()''' or '''sprintf "%O"''' x</tt>
| <tt>'''sprintf "%A"''' x</tt>
| <tt>x'''.Clone()'''</tt>
| <tt>x '''=''' y or x'''<wbr/>.Equals('''y''')'''</tt>
| <tt>'''compare''' x y or x'''<wbr/>.CompareTo('''y''')'''</tt>
| <tt>'''hash''' x or x'''<wbr/>.GetHashCode()'''</tt>
| 
|-
| COBOL
| colspan=7 {{n/a}}
|}

== Type manipulation ==
{| class="wikitable"
|-
! rowspan=2|
! rowspan=2| Get object type
! rowspan=2| Is instance of (includes subtypes)
! rowspan=2| Upcasting
! colspan=2| [[Downcasting]]
|-
! Runtime check
! No check
|-
| ABAP Objects
| colspan=2 {{n/a}}<ref>Run-time type information in ABAP can be gathered by using different description Classes like CL_ABAP_CLASSDESCR.</ref>
| =
| ?=
|-
| C++ (STL)
| <tt>'''[[typeid]]('''x''')'''</tt>
| <tt>'''[[dynamic_cast]]<'''type''' *>(&'''x''') != [[null pointer|NULL]]'''</tt>
| rowspan=5 {{n/a}}<ref name="implicit_cast">Upcasting is implicit in this language. A subtype instance can be used where a supertype is needed.</ref>
| <tt>'''[[dynamic_cast]]<'''type'''*>('''ptr''')'''</tt>
| <tt>'''('''type'''*)''' ptr or <br /> '''static_cast<'''type'''*>('''ptr''')'''</tt>
|-
| C#
| <tt>x'''.GetType()'''</tt>
| <tt>x '''is''' type</tt>
| <tt>'''('''type''')''' x or x '''as''' type</tt>
|
|-
| D
| <tt>'''typeid('''x''')'''</tt>
| 
| <tt>'''cast('''type''')''' x</tt>
|
|-
| Delphi
| 
| <tt>x '''is''' type</tt>
| <tt>x '''as''' type</tt>
|
|-
| Java
| <tt>x.'''getClass()'''</tt>
| <tt>x '''instanceof''' class</tt>
| <tt>'''('''type''')''' x</tt>
|
|-
| Objective-C (Cocoa)
| <tt>'''['''x''' class]'''</tt>
| <tt>'''['''x''' isKindOfClass:['''class''' class]]'''</tt>
|
| <tt>'''('''type'''*)''' x</tt>
|-
| Swift
| <tt>x'''.dynamicType'''</tt>
| <tt>x '''is''' type</tt>
|
| <tt>x '''as''' type</tt>
|-
| JavaScript
| <tt>x.'''constructor''' <small>(If not rewritten.)</small></tt>
| <tt>x '''instanceof''' class</tt>
| colspan=3 {{n/a}}<ref name="nocast">This language is dynamically typed. Casting between types is not necessary.</ref>
|-
| Visual Basic .NET
| <tt>x'''.GetType()'''</tt>
| <tt>'''TypeOf''' x '''Is''' type</tt>
| {{n/a}}<ref name="implicit_cast"/>
| <tt>'''CType('''x''', '''type''')''' or '''TryCast('''x''', '''type''')'''</tt>
|
|-
| Xojo
| <tt>'''Introspection.GetType(x)'''</tt>
| <tt>x '''IsA''' type</tt>
| {{n/a}}
| <tt>'''CType('''x''', '''type''')'''</tt>
| {{n/a}}
|-
| Eiffel
| <tt>x'''.generating_type'''</tt>
| <tt>'''attached {TYPE}''' x</tt>
| <tt>'''attached {TYPE}''' x '''as''' down_x</tt>
|
|-
| Python
| <tt>'''type('''x''')'''</tt>
| <tt>'''isinstance('''x''', '''type''')'''</tt>
| colspan=3 rowspan=3 {{n/a}}<ref name="nocast"/>
|-
| PHP
| <tt>'''get_class('''x''')'''</tt>
| <tt>x '''instanceof''' class</tt>
|-
| Perl
| <tt>'''ref('''x''')'''</tt>
| <tt>x'''->isa("'''class'''")'''</tt>
|-
| Perl 6
| <tt>x'''.WHAT'''</tt>
| <tt>x'''.isa('''class''')'''</tt>
| {{n/a}}<ref name="implicit_cast" />
| <tt>type'''('''x''')''' or<br /> x'''.'''type</tt>
|
|-
| Ruby
| <tt>x'''.class'''</tt>
| <tt>x'''.instance_of?('''type''')''' or<br /> x'''.kind_of?('''type''')'''</tt>
| colspan=3 rowspan=2 {{n/a}}<ref name="nocast"/>
|-
| Smalltalk
| <tt>x '''class'''</tt>
| <tt>x '''isKindOf:''' class</tt>
|-
| Windows PowerShell
| <tt>x'''.GetType()'''</tt>
| <tt>x '''-is ['''type''']'''</tt>
| {{n/a}}<ref name="implicit_cast" />
| <tt>'''['''type''']'''x or x '''-as ['''type''']'''</tt>
|
|-
| OCaml
| colspan=2 {{n/a}}<ref>This language doesn't give run-time type information. It is unnecessary because it is statically typed and downcasting is not possible.</ref>
| rowspan=2| <tt>'''('''x ''':>''' type''')'''</tt>
| colspan=2 {{n/a}}
|-
| F#
| <tt>x'''.GetType()'''</tt>
| <tt>x ''':?''' type</tt>
| <tt>'''('''x ''':?>''' type''')'''</tt>
|
|-
| COBOL
| colspan=2 {{n/a}}
| <code>x '''AS''' type</code><ref name="implicit_cast" />
| colspan=2 {{n/a}}
|-
|}

== Namespace management ==
{| class="wikitable"
|-
! rowspan=2|
! colspan=2| Import namespace
! rowspan=2| Import item
|-
! qualified
! unqualified
|-
| ABAP Objects
| 
| 
| 
|-
| C++ (STL)
|
| <tt>'''using namespace''' ns''';'''</tt>
| <tt>'''using''' ns::item ''';'''</tt>
|-
| C#
| 
| <tt>'''using''' ns''';'''</tt>
| <tt>'''using''' item '''=''' ns'''.'''item''';'''</tt>
|-
| D
| 
| <tt>'''import''' ns''';'''</tt>
| <tt>'''import''' ns ''':''' item''';'''</tt>
|-
| Java
| 
| <tt>'''import''' ns'''.*;'''</tt>
| <tt>'''import''' ns'''.'''item</tt>
|-
| Objective-C
| 
| 
| 
|-
| Visual Basic .NET
| 
| <tt>'''Imports''' ns</tt>
| 
|-
| Eiffel
| 
| 
| 
|-
| Python
| <tt>'''import''' ns</tt>
| <tt>'''from''' ns '''import''' *</tt>
| <tt>'''from''' ns '''import''' item</tt>
|-
| PHP
| 
| <tt>'''use''' ns''';'''</tt>
| <tt>'''use''' ns'''\'''item''';'''</tt>
|-
| Perl
| rowspan=2| <tt>'''use''' ns''';'''</tt>
| 
| <tt>'''use''' ns qw(item)''';'''</tt>
|-
| Perl 6
| 
| 
|-
| Ruby
| 
| 
| 
|-
| Windows PowerShell
| 
| 
| 
|-
| OCaml
| 
| rowspan=2| <tt>'''open''' ns</tt>
| 
|-
| F#
| 
| 
|-
| COBOL
| colspan=3 {{n/a}}
|}

== Contracts ==
{| class="wikitable"
|-
!
! Precondition
! Postcondition
! Check
! Invariant
! Loop
|-
| ABAP Objects
| colspan=5 rowspan=2 {{n/a}}
|-
| C++ (STL)
|-
| C#
| <tt>''Spec#'':<br /> type foo'''(''' «parameters» ''')'''<br />&nbsp;&nbsp;&nbsp;&nbsp;'''requires''' expression <br />{<br /> &nbsp;&nbsp;&nbsp;&nbsp;body <br />}</tt>
| <tt>''Spec#'':<br /> type foo'''(''' «parameters» ''')'''<br />&nbsp;&nbsp;&nbsp;&nbsp;'''ensures''' expression <br />{<br /> &nbsp;&nbsp;&nbsp;&nbsp;body <br />}</tt>
|-
| Java
| colspan=5 rowspan=3 {{n/a}}
|-
| Objective-C
|-
| Visual Basic .NET
|-
| D
| <tt>f '''in { '''expression''' } body{ '''instructions''' }'''</tt>
| <tt>f '''out ('''result''') { '''expression''' } body{ '''instructions''' }'''</tt>
| 
| <tt>'''invariant() { '''expression''' }'''</tt>
| 
|-
| Eiffel
| <tt>f <br />'''require''' tag: expression <br />'''do end'''</tt>
| <tt>f <br />'''do <br /> ensure''' tag: expression <br />'''end'''</tt>
| <tt>f <br />'''do''' <br /> '''check''' tag: expression '''end <br /> end'''</tt>
| <tt>'''class''' X <br />'''invariant''' tag: expression <br />'''end'''</tt>
| <tt>'''from ''' instructions <br /> '''invariant''' <br />tag: expression <br /> '''until''' <br /> expr <br /> '''loop''' <br /> instructions <br />'''variant''' <br /> tag: expression <br />'''end'''</tt>
|-
| Python
| colspan=5 rowspan=3 {{n/a}}
|-
| PHP
|-
| Perl
|-
| Perl 6
| <tt>'''PRE {''' condition '''}'''</tt>
| <tt>'''POST {''' condition '''}'''</tt>
| 
| 
| 
|-
| Ruby
| colspan=5 rowspan=5 {{n/a}}
|-
| Windows PowerShell
|-
| OCaml
|-
| F#
|-
| COBOL
|}

== See also ==
* [[Object-oriented programming]]

== References and notes ==
{{Reflist|2}}

[[Category:Programming language comparisons]]
[[Category:Object-oriented programming]]
